<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>二分查找</title>
    <url>/2020/04/05/algorithm/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
    <content><![CDATA[<p>二分查找是在有序数组中进行查询的方法，思路虽简单，但是关于各种边界、+1、-1，总是会出现错误。这里以左闭右闭的形式，进行总结，做到简单易懂。</p>
<a id="more"></a>

<ol>
<li><p>普通二分查找<br>high选取的是len(nums)-1，如此形成的是左闭右闭区间，也有很多其他地方使用左闭右开，但我觉得不易于理解和记忆。<br>mid我们使用low + (high-low)/2来获取，是为了避免溢出，(high+low)/2分子可能会超出数据上限。<br>因为左闭右闭，所以mid位置的数据我们已经查询过，所以小于target，我们将low=mid+1。大于target，high=mid-1。等于直接返回。没有查找到返回-1。另外循环条件是&lt;=，也需要注意下。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">search</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	low <span class="token operator">:=</span> <span class="token number">0</span>
	high <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
	<span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">&#123;</span>
		mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
		<span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token punctuation">&#123;</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">&#123;</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> mid
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>左边界查找<br>主体上和普通二分查找差别不大，但要注意三个差异点。<br>一是相等时high = mid - 1，因为我们是查找左边界，当相等的时候，可能左侧还有符合的数字，此时需要收缩右边界。<br>二是返回值为low，我们记住查做边界，那么返回左侧。结合上一条思考下，为什么这样可以返回符合的值呢？当nums[mid]==target，收缩边界，假若此时mid正好是左边界位置，那么对[low,mid-1]继续查询，因为一直小于low不断+1，知道low&gt;mid-1，即mid。<br>三是特殊判断，因为low的取值是不停+1，最坏情况超出上界，需要做处理，另外当循环中断时，返回索引可能不符合条件，同样要判断。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">left</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	low <span class="token operator">:=</span> <span class="token number">0</span>
	high <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
	<span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">&#123;</span>
		mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
		<span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token punctuation">&#123;</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">&#123;</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">&#123;</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span> <span class="token comment">//注意</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> low <span class="token operator">>=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">!=</span> target <span class="token punctuation">&#123;</span> <span class="token comment">//注意</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> low <span class="token comment">//注意</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>右边界查找<br>基本和查做边界差不多，差异在：<br>low=mid+1收缩左边界<br>high不停-1，做边界检查<br>查询的是右边界，返回值为high</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">right</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> target <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	low <span class="token operator">:=</span> <span class="token number">0</span>
	high <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
	<span class="token keyword">for</span> low <span class="token operator">&lt;=</span> high <span class="token punctuation">&#123;</span>
		mid <span class="token operator">:=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high<span class="token operator">-</span>low<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span>
		<span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target <span class="token punctuation">&#123;</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target <span class="token punctuation">&#123;</span>
			high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token punctuation">&#123;</span>
			low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token comment">//注意</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> high <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">!=</span> target <span class="token punctuation">&#123;</span> <span class="token comment">//注意</span>
		<span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> high <span class="token comment">//注意</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快速排序</title>
    <url>/2020/09/16/algorithm/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<p>以第一个数为基准数，先从右找到一个小于它的数位置i，再从左找到一个大于它的数位置j，交换两数字。循环执行，直到i==j此时中断循环，因为先从右寻找所以i可以保证为比base小的数字，最后将他俩交换，至此i左侧全为小于等于的数字，i右侧全为大于等于的数字，然后递归区间。</p>
<a id="more"></a>

<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> left <span class="token operator">>=</span> right <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	base <span class="token operator">:=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token comment">//基准数</span>
	i <span class="token operator">:=</span> left
	j <span class="token operator">:=</span> right
	<span class="token keyword">for</span> i <span class="token operator">!=</span> j <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> base <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">&#123;</span>
			j<span class="token operator">--</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">for</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> base <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">&#123;</span>
			i<span class="token operator">++</span>
		<span class="token punctuation">&#125;</span>
		nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span>
	nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
	<span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> i <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>channel和select的使用</title>
    <url>/2022/08/07/emq/channel%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>channel和select的基本使用场景。</p>
<a id="more"></a>

<p>channel在golang中主要是用于协程间的通信，是go语言中较为复杂的一部分。这一章笔者并不打算深入的去讲解它，而是列举出在emq项目编写过程中比较常见的用法。</p>
<h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><p>select和channel的使用往往是成对出现。它的使用和switch有相似之处，通过case来对channel的操作（读或写）作出判断，选取对应的分支执行。它的选择并不像if那样顺序，如果有多个条件同时判断成功，那么会<strong>随机执行</strong>。如果没有任何条件符合，那么它会默认执行default，<strong>没有default的情况则会阻塞</strong>。</p>
<h1 id="协程A通知协程B启动"><a href="#协程A通知协程B启动" class="headerlink" title="协程A通知协程B启动"></a>协程A通知协程B启动</h1><p>先来看一段代码，这段代码中Loop start会在main start之前执行。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">go</span> <span class="token function">Loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Loop start"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果希望在main start之后才执行Loop start，可以通过channel传递方法启动的消息，然后利用select来阻塞。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	start <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Loop</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"main start"</span><span class="token punctuation">)</span>
	start <span class="token operator">&lt;-</span> <span class="token number">1</span>

	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Loop</span><span class="token punctuation">(</span>start <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> <span class="token operator">&lt;-</span>start<span class="token punctuation">:</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Loop start"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="生产者消费者模式"><a href="#生产者消费者模式" class="headerlink" title="生产者消费者模式"></a>生产者消费者模式</h1><p>启动三个goroutine，一个往channel写数据，两个从channel读数据，达到数据交互的目的。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	msg <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Producer</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Consumer1</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Consumer2</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Producer</span><span class="token punctuation">(</span>msg <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"producer: %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		msg <span class="token operator">&lt;-</span> i
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Consumer1</span><span class="token punctuation">(</span>msg <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> val <span class="token operator">:=</span> <span class="token operator">&lt;-</span>msg<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"consumer1: %d\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Consumer2</span><span class="token punctuation">(</span>msg <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> val <span class="token operator">:=</span> <span class="token operator">&lt;-</span>msg<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"consumer2: %d\n"</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>打印结果为</p>
<pre class="line-numbers language-none"><code class="language-none">producer: 0
consumer1: 0
producer: 1
consumer2: 1
producer: 2
consumer2: 2
producer: 3
consumer2: 3
producer: 4
consumer1: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意的是，多个goroutine在读同一个channel的时候，写入的数据只会被其中一个给读到。</p>
<h1 id="消息广播"><a href="#消息广播" class="headerlink" title="消息广播"></a>消息广播</h1><p>在生产者消费者模式中我们知道了，同一条数据只会被一个goroutine给读到。那倘若需要通知所有goroutine的时候该怎么办呢？我们可以利用close(channel)的特性，一个已经被close的channel我们仍然可以读取到数据，但是只能读取到类型的零值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Loop1</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token function">Loop2</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token function">close</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
	time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Producer</span><span class="token punctuation">(</span>msg <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"producer: %d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
		msg <span class="token operator">&lt;-</span> i
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Loop1</span><span class="token punctuation">(</span><span class="token builtin">close</span> <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span><span class="token builtin">close</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Loop1..."</span><span class="token punctuation">)</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">Loop2</span><span class="token punctuation">(</span><span class="token builtin">close</span> <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span><span class="token builtin">close</span><span class="token punctuation">:</span>
			<span class="token keyword">return</span>
		<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token punctuation">&#125;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Loop2..."</span><span class="token punctuation">)</span>
		time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面代码两个Loop方法各输出5次后将不会再输出，因为读取到close信号，Loop方法执行了return。这里有一个细节需要注意的是，如果将return换为break，那么Loop方法不会结束，因为break只会退出select，不执行case往下的语句，并无法退出for循环。</p>
<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>time.NewTicker返回ticker，然后使用ticker.C来定时执行。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	f <span class="token operator">:=</span> <span class="token string">"2006-01-02 15:04:05"</span>
	ticker <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">NewTicker</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token operator">&lt;-</span>ticker<span class="token punctuation">.</span>C<span class="token punctuation">:</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>go</category>
        <category>emq</category>
      </categories>
      <tags>
        <tag>emq</tag>
      </tags>
  </entry>
  <entry>
    <title>golang实现优雅退出</title>
    <url>/2022/08/07/emq/golang%E5%AE%9E%E7%8E%B0%E4%BC%98%E9%9B%85%E9%80%80%E5%87%BA/</url>
    <content><![CDATA[<p>golang实现优雅退出，使用sync.WaitGroup和signal.Notify。</p>
<a id="more"></a>

<h1 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a>sync.WaitGroup</h1><p>通常编写代码时我们会启用多个goroutine来执行任务，为了保证在所有goroutine执行完毕后主程序才退出，可以使用sync.WaitGroup。它类似一个计数器，Add(1)方法来加1，Done()方法来减1，使用Wait()方法来阻塞程序（如果计数不为0则不会往下执行）。</p>
<p>先看一个不使用sync.WaitGroup的例子。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"one..."</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"two..."</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面这段代码并不会打印出任何东西，因为主程序并不会等待goroutine全部执行完就退出了，然后我们改进代码。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup

	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"one..."</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"two..."</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码会输出</p>
<pre class="line-numbers language-none"><code class="language-none">two...
one...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>或</p>
<pre class="line-numbers language-none"><code class="language-none">one...
two...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>wg.Wait()会阻塞住程序的退出，直到所有goroutine执行完毕（one和two的顺序不一致，因为goroutine无法保证执行顺序）。</p>
<p>或许你会问，上面的代码不是已经可以实现优雅退出了吗，还需要signal.Notify做些啥呢？事实上，一个正常的程序更多的时候是一直在运行，直到收到退出信号（例如Ctrl+c），才终止程序。因此需要使用signal.Notify来监听退出信号。</p>
<h1 id="signal-Notify"><a href="#signal-Notify" class="headerlink" title="signal.Notify"></a>signal.Notify</h1><p>signal.Notify可以用来监听程序信号，它的第一个参数是chan&lt;- os.Signal，第二个参数是…os.Signal（可以传入多个需要监听的信号类型）。它会将收到的信号传递给channel c，因此我们可以通过读channel来阻塞程序，直到获取到退出信号再继续往下执行。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os"</span>
	<span class="token string">"os/signal"</span>
	<span class="token string">"syscall"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"start..."</span><span class="token punctuation">)</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span>
	signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">)</span>
	<span class="token operator">&lt;-</span>c
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"exit..."</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码启动后不会主动退出，必须执行ctrl+c才会退出。</p>
<h1 id="优雅退出"><a href="#优雅退出" class="headerlink" title="优雅退出"></a>优雅退出</h1><p>通过对sync.WaitGroup和signal.Notify的组合使用，再配合上channel关闭，我们就可以实现优雅退出。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"os"</span>
	<span class="token string">"os/signal"</span>
	<span class="token string">"sync"</span>
	<span class="token string">"syscall"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> os<span class="token punctuation">.</span>Signal<span class="token punctuation">)</span>
	signal<span class="token punctuation">.</span><span class="token function">Notify</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGINT<span class="token punctuation">,</span> syscall<span class="token punctuation">.</span>SIGTERM<span class="token punctuation">)</span>

	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	exitChan <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>

	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>exitChan<span class="token punctuation">:</span>
				<span class="token keyword">return</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token punctuation">&#125;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"one..."</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">select</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">case</span> <span class="token operator">&lt;-</span>exitChan<span class="token punctuation">:</span>
				<span class="token keyword">return</span>
			<span class="token keyword">default</span><span class="token punctuation">:</span>
			<span class="token punctuation">&#125;</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"two..."</span><span class="token punctuation">)</span>
			time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>Second<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token operator">&lt;-</span>c
	<span class="token function">close</span><span class="token punctuation">(</span>exitChan<span class="token punctuation">)</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>收到退出信号后，通过close(exitChan)来通知所有goroutine结束for循环，wg.Wait()阻塞等所有goroutine结束。</p>
]]></content>
      <categories>
        <category>go</category>
        <category>emq</category>
      </categories>
      <tags>
        <tag>emq</tag>
      </tags>
  </entry>
  <entry>
    <title>golang并发下的数据控制</title>
    <url>/2022/08/21/emq/golang%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>golang并发下的数据控制，主要使用lock和atomic。</p>
<a id="more"></a>

<h1 id="一般情况"><a href="#一般情况" class="headerlink" title="一般情况"></a>一般情况</h1><p>其实笔者在最开始没有并发编程经验的时候，常常会有一个疑问：为什么并发编程需要加锁？<br>我们先来看一个例子</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">var</span> num <span class="token builtin">int64</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			num<span class="token operator">++</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码，按照我们的一般理解，对num进行10000次加1，最后的结果应该是10000才对。但是他与普通的for循环不同之处在于，我们使用了goroutine。</p>
<p>如果你跑一跑这段代码，那么你会发现结果不是10000，而是小于它的某个数字。</p>
<p>想一想的话其实不难理解，因为使用了goroutine，所以多个goroutine同时对num进行加1，可能协程a和协程b执行时候拿到的值相同（假如都是50），协程a和b各自加1都为51，所以他们俩的操作重复赋值。虽然进行了两次操作但是结果只增加了1。</p>
<h1 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h1><p>golang提供了sync.Mutex，我们可以用它来进行Lock，这样多个goroutine同时执行的时候会去抢锁，只有获取到锁的那个goroutine才能往下执行，没有获取到锁的goroutine会被阻塞，直到获取到锁。这样就能够保证num同一时间是会被一个goroutine来进行操作，为此我们改写代码，它的执行结果会一直是10000。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">var</span> mtx sync<span class="token punctuation">.</span>Mutex
	<span class="token keyword">var</span> num <span class="token builtin">int64</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			mtx<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token keyword">defer</span> mtx<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			num<span class="token operator">++</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然sync.Mutex为我们保证了变量的正确操作，但如果是读多写少的场景，多个同时读的goroutine也会阻塞等待。这个时候我们可以使用sync.RWMutex，它为我们提供了读锁RLock()和写锁Lock()。读锁可以被多个goroutine同时获取到，而写锁则必须等待读锁全部释放才能获取。</p>
<h1 id="atomic"><a href="#atomic" class="headerlink" title="atomic"></a>atomic</h1><p>golang为我们提供了一个atomic包，我们可以使用它来进行原子操作。这样我们不需要加锁的情况下，就能保证并发编程中不会有变量的冲突了。</p>
<h2 id="int64"><a href="#int64" class="headerlink" title="int64"></a>int64</h2><p>使用atomic.AddInt64来进行加减，第一个参数传入num的指针。当我们获取num的值，可以使用atomic.LoadInt64。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"sync"</span>
	<span class="token string">"sync/atomic"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> wg sync<span class="token punctuation">.</span>WaitGroup
	<span class="token keyword">var</span> num <span class="token builtin">int64</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">defer</span> wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token comment">// 打印值为10000</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// num是10000不是9999，不执行</span>
	atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>

	<span class="token comment">// num是10000，将num设置为1</span>
	atomic<span class="token punctuation">.</span><span class="token function">CompareAndSwapInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>atomic还为我们提供了一个先比较再设置的方法CompareAndSwapInt64，只有当old值判断相等，才会执行设置操作，否则返回false。</p>
<p>除此之外还有atomic.StoreInt64（保存），atomic.SwapInt64（保存并返回旧值）。</p>
<h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><p>如果基本的类型无法满足我们需求，我们可以使用atomic.Value，它可以用来存放指针。利用它可以进行任意值的原子存储与加载。</p>
<p>但我们需要注意两点：1.不能存放nil 2.存储第一个值后，只能再存储同类型的值。</p>
]]></content>
      <categories>
        <category>go</category>
        <category>emq</category>
      </categories>
      <tags>
        <tag>emq</tag>
      </tags>
  </entry>
  <entry>
    <title>golang编写tcp服务</title>
    <url>/2022/07/21/emq/golang%E7%BC%96%E5%86%99tcp%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>使用golang编写一个tcp服务，包含server和client。</p>
<a id="more"></a>

<h1 id="server"><a href="#server" class="headerlink" title="server"></a>server</h1><p>golang中提供了net包，我们可以用它来编写一个tcp服务。<br>可以通过net.Listen方法来创建一个地址的监听，返回一个listener。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:9000"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>再循环调用listener的Accept()方法，这个方法会等待并获取一个客户端的连接conn，是一个net.Conn结构体。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>然后启动一个goroutine来处理获取到的连接conn，一般是使用一个for循环来不停读取数据。对于conn我们将其当作一个数据流来对他进行处理即可，循环从其中读取数据并根据’\n’来进行分割。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>

<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
    line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>并且可以使用conn.Write方法来对客户端连接进行数据返回。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><strong>完整代码</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"bufio"</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"log"</span>
	<span class="token string">"net"</span>
	<span class="token string">"runtime"</span>
	<span class="token string">"strings"</span>
	<span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	tcpServer <span class="token operator">:=</span> <span class="token operator">&amp;</span>TCPServer<span class="token punctuation">&#123;</span>address<span class="token punctuation">:</span> <span class="token string">"127.0.0.1:9000"</span><span class="token punctuation">&#125;</span>
	err <span class="token operator">:=</span> tcpServer<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">select</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> TCPServer <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	address <span class="token builtin">string</span>
	wg      sync<span class="token punctuation">.</span>WaitGroup
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>t <span class="token operator">*</span>TCPServer<span class="token punctuation">)</span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	listener<span class="token punctuation">,</span> err <span class="token operator">:=</span> net<span class="token punctuation">.</span><span class="token function">Listen</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>address<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> listener<span class="token punctuation">.</span><span class="token function">Accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> nerr<span class="token punctuation">,</span> ok <span class="token operator">:=</span> err<span class="token punctuation">.</span><span class="token punctuation">(</span>net<span class="token punctuation">.</span>Error<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token operator">&amp;&amp;</span> nerr<span class="token punctuation">.</span><span class="token function">Temporary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token comment">// 如果是超时等临时错误，先暂停当前goruntine交出调度，时间片轮转到后再恢复后续操作</span>
				runtime<span class="token punctuation">.</span><span class="token function">Gosched</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
				<span class="token keyword">continue</span>
			<span class="token punctuation">&#125;</span>

			<span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"use of closed network connection"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"listener.Accept() error - %s"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
			<span class="token punctuation">&#125;</span>

			<span class="token keyword">break</span>
		<span class="token punctuation">&#125;</span>

		t<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">handle</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>
			t<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	t<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">handle</span><span class="token punctuation">(</span>conn net<span class="token punctuation">.</span>Conn<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	reader <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>conn<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		line<span class="token punctuation">,</span> err <span class="token operator">:=</span> reader<span class="token punctuation">.</span><span class="token function">ReadString</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>

		log<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"receive: "</span> <span class="token operator">+</span> line<span class="token punctuation">)</span>

		conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="client"><a href="#client" class="headerlink" title="client"></a>client</h1><p>客户端可以使用 dialer.Dial方法来对server进行连接，方法的返回值也是一个net.Conn结构体，具体使用与server没有区别。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> dialer<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:9000"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我们可以给dialer的Timeout字段赋值来设置请求的超时时间，默认是没有超时。</p>
<p><strong>完整代码</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"net"</span>
	<span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	dialer <span class="token operator">:=</span> <span class="token operator">&amp;</span>net<span class="token punctuation">.</span>Dialer<span class="token punctuation">&#123;</span>
		Timeout<span class="token punctuation">:</span> time<span class="token punctuation">.</span>Second <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>

	conn<span class="token punctuation">,</span> err <span class="token operator">:=</span> dialer<span class="token punctuation">.</span><span class="token function">Dial</span><span class="token punctuation">(</span><span class="token string">"tcp"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1:9000"</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
		conn<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	conn<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>go</category>
        <category>emq</category>
      </categories>
      <tags>
        <tag>emq</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析1:consistenthash.go</title>
    <url>/2020/03/09/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/</url>
    <content><![CDATA[<p>consistenthash.go文件主要是提供一个Map数据结构，它基于一致性哈希算法，来达到根据缓存的key名，去寻找对应服务器结点的作用。</p>
<a id="more"></a>

<h1 id="一致性哈希算法"><a href="#一致性哈希算法" class="headerlink" title="一致性哈希算法"></a>一致性哈希算法</h1><p>参考文章：<a href="https://www.cnblogs.com/cloudgeek/p/9427036.html">https://www.cnblogs.com/cloudgeek/p/9427036.html</a></p>
<p>假设我们有三台机器，有一个key需要缓存到其中一台上，我们可以通过hash(key)%N的方式来取余，这样结果必定是其中的一台机器。<br>但是上面的方式存在一个缺点，就是如果增加或者减少结点，那么其中的缓存会被大量的转移。</p>
<p>一致性哈希的方式，是将存在的机器串在一起，首尾相连，看起来每台机器就是圆上的一个点。然后我们将hash(key)的值跟其最近一个点关联，存储在该台机器上，这样当该结点消失，我们只需要重新分配与其关联的缓存即可。如果添加结点，也只需要将已经存在某结点的部分缓存进行重新分配。<br>但是这种方式，同样存在一个缺点，如果结点较少，很容易分配不均，某台过多或者过少。</p>
<p>于是，我们引入虚拟结点的概念，将hash(机器+num)与机器做关联，通过缓存-&gt;虚拟结点-&gt;结点的形式进行绑定，增加了数据分配的平衡性。</p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><ol>
<li>Hash定义了一个函数类型，接受[]byte返回uint32，他表示我们选择哈希运算方法类型。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Hash <span class="token keyword">func</span><span class="token punctuation">(</span>data <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">uint32</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li>Map是一个数据结构，用来保存hash后的结点。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Map <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	hash     Hash <span class="token comment">//哈希算法类型</span>
	replicas <span class="token builtin">int</span> <span class="token comment">//每个机器的虚拟结点数</span>
	keys     <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span> <span class="token comment">//哈希环上的一个点，其值为结点哈希算法后的返回值，升序排列</span>
	hashMap  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">//映射关系，key为keys中保存的值，val是对应机器</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>初始化方法，返回一个Map数据结构。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>replicas <span class="token builtin">int</span><span class="token punctuation">,</span> fn Hash<span class="token punctuation">)</span> <span class="token operator">*</span>Map <span class="token punctuation">&#123;</span>
	m <span class="token operator">:=</span> <span class="token operator">&amp;</span>Map<span class="token punctuation">&#123;</span>
		replicas<span class="token punctuation">:</span> replicas<span class="token punctuation">,</span>
		hash<span class="token punctuation">:</span>     fn<span class="token punctuation">,</span>
		hashMap<span class="token punctuation">:</span>  <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> m<span class="token punctuation">.</span>hash <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		m<span class="token punctuation">.</span>hash <span class="token operator">=</span> crc32<span class="token punctuation">.</span>ChecksumIEEE
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> m
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>判断Map是否为空。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>将机器结点添加到Map中。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>keys <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> keys <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>replicas<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span> <span class="token comment">//生成虚拟结点</span>
			hash <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			m<span class="token punctuation">.</span>keys <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">,</span> hash<span class="token punctuation">)</span>
			m<span class="token punctuation">.</span>hashMap<span class="token punctuation">[</span>hash<span class="token punctuation">]</span> <span class="token operator">=</span> key
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	sort<span class="token punctuation">.</span><span class="token function">Ints</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token comment">//排序</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>获取结点机器的方法。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>Map<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> m<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//非空判断</span>
		<span class="token keyword">return</span> <span class="token string">""</span>
	<span class="token punctuation">&#125;</span>

	hash <span class="token operator">:=</span> <span class="token function">int</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//生成key的哈希，这里key代表的是缓存数据的key</span>
    
    <span class="token comment">//遍历[0,n),查找到符合func返回true的最小i值，若都不符合条件返回n</span>
	idx <span class="token operator">:=</span> sort<span class="token punctuation">.</span><span class="token function">Search</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> m<span class="token punctuation">.</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> hash <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

    <span class="token comment">//这里想一下不难理解，如果是一条直线的话，我们一直取比hash值大的那个结点</span>
    <span class="token comment">//如果这个结点不存在，则取结点0</span>
	<span class="token keyword">if</span> idx <span class="token operator">==</span> <span class="token function">len</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		idx <span class="token operator">=</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>

    <span class="token comment">//返会结点对应机器</span>
	<span class="token keyword">return</span> m<span class="token punctuation">.</span>hashMap<span class="token punctuation">[</span>m<span class="token punctuation">.</span>keys<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析3:lru.go</title>
    <url>/2020/03/11/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%903/</url>
    <content><![CDATA[<p>LRU算法全称Least Recently Used ，最近最少使用，当数据所占内存达到一定阈值，我们要移除掉最近最少使用的数据。</p>
<a id="more"></a>

<ol>
<li>定义了一个缓存结构体，MaxEntries表示缓存的数量上限，值为0不限制。OnEvicted是一个func类型，当缓存被淘汰时被调用。ll是一个双向链表指针，链表两头分别为最新和最旧的数据。cache是一个map，k是缓存名，v是链表中元素指针。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Cache <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	MaxEntries <span class="token builtin">int</span>
	OnEvicted <span class="token keyword">func</span><span class="token punctuation">(</span>key Key<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	ll    <span class="token operator">*</span>list<span class="token punctuation">.</span>List
	cache <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>Key是定义的类型，可包含任何对象。entry结构体，缓存的单位。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Key <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> entry <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	key   Key
	value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>初始化方法，创建一个lru缓存。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">New</span><span class="token punctuation">(</span>maxEntries <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>Cache <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>Cache<span class="token punctuation">&#123;</span>
		MaxEntries<span class="token punctuation">:</span> maxEntries<span class="token punctuation">,</span>
		ll<span class="token punctuation">:</span>         list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		cache<span class="token punctuation">:</span>      <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>添加方法，先惰性加载cache和ll属性，虽然new的时候会创建他俩，但是若执行clear方法会把这两个属性又置为了nil，所以这里要判断。然后判断新加的key是否已经存在，若存在将其移到ll的最前方，并返回value。否则，创建entry，将其加入ll的最前方，cache保存其在ll中的元素指针。开启了缓存限制，并且ll大小已超，调用RemoveOldest方法。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>key Key<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token operator">*</span>list<span class="token punctuation">.</span>Element<span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>ll <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> ee<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">MoveToFront</span><span class="token punctuation">(</span>ee<span class="token punctuation">)</span>
		ee<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	ele <span class="token operator">:=</span> c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">PushFront</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>entry<span class="token punctuation">&#123;</span>key<span class="token punctuation">,</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> ele
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>MaxEntries <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> c<span class="token punctuation">.</span>MaxEntries <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">RemoveOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>获取缓存，cache不存在，直接返回空。若key存在，获取其值，将其移到ll最前方。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>key Key<span class="token punctuation">)</span> <span class="token punctuation">(</span>value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> ele<span class="token punctuation">,</span> hit <span class="token operator">:=</span> c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> hit <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">MoveToFront</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
		<span class="token keyword">return</span> ele<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token boolean">true</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>removeElement，移除一个单位，分别从ll和cache中移除，若定义了OnEvicted，调用该方法。Remove包装了removeElement，为实际对外使用的方法名。RemoveOldest，获取ll最后一个元素，将其删除。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Remove</span><span class="token punctuation">(</span>key Key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> ele<span class="token punctuation">,</span> hit <span class="token operator">:=</span> c<span class="token punctuation">.</span>cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> hit <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">removeElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">RemoveOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	ele <span class="token operator">:=</span> c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">Back</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> ele <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">removeElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>e <span class="token operator">*</span>list<span class="token punctuation">.</span>Element<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
	kv <span class="token operator">:=</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span>
	<span class="token function">delete</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>cache<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>key<span class="token punctuation">)</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>OnEvicted <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span><span class="token function">OnEvicted</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>key<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>获取缓存的总数。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>cache <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>ll<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>清理所有缓存，OnEvicted不为nil，遍历元素执行回调，然后将ll和cache置为nil，因为这个缘故所以在Add方法最开始有一个惰性加载。<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>Cache<span class="token punctuation">)</span> <span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>OnEvicted <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> e <span class="token operator">:=</span> <span class="token keyword">range</span> c<span class="token punctuation">.</span>cache <span class="token punctuation">&#123;</span>
			kv <span class="token operator">:=</span> e<span class="token punctuation">.</span>Value<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>entry<span class="token punctuation">)</span>
			c<span class="token punctuation">.</span><span class="token function">OnEvicted</span><span class="token punctuation">(</span>kv<span class="token punctuation">.</span>key<span class="token punctuation">,</span> kv<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	c<span class="token punctuation">.</span>ll <span class="token operator">=</span> <span class="token boolean">nil</span>
	c<span class="token punctuation">.</span>cache <span class="token operator">=</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析2:groupcachepb</title>
    <url>/2020/03/10/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/</url>
    <content><![CDATA[<p>groupcachepb打开后我们可以看到.proto文件和.pb.go文件，这玩意儿我们很熟悉，protobuf协议嘛，我们只需要关注.proto即可，.pb.go是基于他生成，关于protobuf的具体内容不详述，大家知道他是一个用来进行通信的协议即可。</p>
<a id="more"></a>

<ol>
<li>协议版本和包名。<pre class="line-numbers language-go" data-language="go"><code class="language-go">syntax <span class="token operator">=</span> <span class="token string">"proto2"</span><span class="token punctuation">;</span>

<span class="token keyword">package</span> groupcachepb<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li>
<li>请求消息结构，两个字符串，分别为group和key，必须字段。<pre class="line-numbers language-go" data-language="go"><code class="language-go">message GetRequest <span class="token punctuation">&#123;</span>
  required <span class="token builtin">string</span> group <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  required <span class="token builtin">string</span> key <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>回复消息结构，[]byte和double类型，可选字段。<pre class="line-numbers language-go" data-language="go"><code class="language-go">message GetResponse <span class="token punctuation">&#123;</span>
  optional bytes value <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  optional double minute_qps <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>rpc服务定义，但是我貌似没有在代码中看到使用rpc的地方。<pre class="line-numbers language-go" data-language="go"><code class="language-go">service GroupCache <span class="token punctuation">&#123;</span>
  rpc <span class="token function">Get</span><span class="token punctuation">(</span>GetRequest<span class="token punctuation">)</span> returns <span class="token punctuation">(</span>GetResponse<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析4:singleflight.go</title>
    <url>/2020/03/14/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%904/</url>
    <content><![CDATA[<p>singleflight.go文件代码不多，主要是提供了一个竞争执行方法，利用sync.WaitGroup来让重复的请求，进行等待，只实际执行一次，并将执行结果返回给所有等待的请求。算是一个并发的处理机制。</p>
<a id="more"></a>

<p>关于sync.WaitGroup的简单使用就是在创建一个任务的时候wg.Add(1), 任务完成的时候使用wg.Done()来将任务减一。使用wg.Wait()来阻塞等待所有任务完成。</p>
<ol>
<li><p>call结构体表示实际的一个请求，包括返回值，错误，和wg。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> call <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	wg  sync<span class="token punctuation">.</span>WaitGroup
	val <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	err <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Group结构体表示一类工作，可以当成命名空间，对于同一个Group下的相同key请求我们只执行一次方法。m是map，对应保存请求key和他的call指针。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	mu sync<span class="token punctuation">.</span>Mutex
	m  <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Do方法是本文件的核心，我们具体看下。<br>先判断key是否咋g.m中存在，如果存在，那么说明同一个key被多次请求了，我们得到call指针，调用Wait方法，进行阻塞等待，等到call指针执行完后，取得val和err返回即可。注意这里加锁的操作，防止取数据时，m被修改了。假如g.m[key]不存在，那么说明当前是key的第一个请求，new(call)返回指针并且c.wg.Add(1)，实际上在整个过程中，也只会Add这一次，将其放入map。等待fn()完成后，执行Done()方法，解除Wait的阻塞，将值返回给其他多次相同请求。最后从map中移除，收尾工作完成。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Do</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>m <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		g<span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>call<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err
	<span class="token punctuation">&#125;</span>
	c <span class="token operator">:=</span> <span class="token function">new</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	g<span class="token punctuation">.</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> c
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>wg<span class="token punctuation">.</span><span class="token function">Done</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">delete</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>m<span class="token punctuation">,</span> key<span class="token punctuation">)</span>
	g<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">return</span> c<span class="token punctuation">.</span>val<span class="token punctuation">,</span> c<span class="token punctuation">.</span>err
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析5:byteview.go</title>
    <url>/2020/03/15/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%905/</url>
    <content><![CDATA[<p>byteview.go文件提供了一个数据结构ByteView，它是对[]byte或string类型的一个封装，提供了一些方法。</p>
<a id="more"></a>

<ol>
<li><p>结构体定义，含有[]byte类型b和string类型s，优先使用b，b为nil再使用s。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ByteView <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	s <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>返回长度。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>基于结构体内容，返回一个[]byte类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">ByteSlice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>基于结构体内容，返回一个string类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> v<span class="token punctuation">.</span>s
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>返回数据中指定位置的原始字节。<strong>这里有一个小细节值得注意，那就是v.s[i]返回的是原始字节，而并不是如我们所想的返回字符串中某一个字符。</strong></p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">At</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> v<span class="token punctuation">.</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> v<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>截取数据，返回的仍然是一个ByteView。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">Slice</span><span class="token punctuation">(</span>from<span class="token punctuation">,</span> to <span class="token builtin">int</span><span class="token punctuation">)</span> ByteView <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ByteView<span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span> v<span class="token punctuation">.</span>b<span class="token punctuation">[</span>from<span class="token punctuation">:</span>to<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> ByteView<span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span> v<span class="token punctuation">.</span>s<span class="token punctuation">[</span>from<span class="token punctuation">:</span>to<span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>截取指定索引位置到结尾的数据，返回ByteView。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">SliceFrom</span><span class="token punctuation">(</span>from <span class="token builtin">int</span><span class="token punctuation">)</span> ByteView <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ByteView<span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span> v<span class="token punctuation">.</span>b<span class="token punctuation">[</span>from<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> ByteView<span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span> v<span class="token punctuation">.</span>s<span class="token punctuation">[</span>from<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>拷贝数据到一个[]byte变量中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">Copy</span><span class="token punctuation">(</span>dest <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">copy</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> v<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>两个ByteView做比较。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">Equal</span><span class="token punctuation">(</span>b2 ByteView<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> b2<span class="token punctuation">.</span>b <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">EqualString</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> v<span class="token punctuation">.</span><span class="token function">EqualBytes</span><span class="token punctuation">(</span>b2<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>与字符串做比较，如果v的b为空，那么直接拿string类型s判断是否相等即可。否则，需要拿[]byte类型b和string比较，先判断长度是否相等，再逐个字节比对。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">EqualString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> v<span class="token punctuation">.</span>s <span class="token operator">==</span> s
	<span class="token punctuation">&#125;</span>
	l <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">!=</span> l <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> bi <span class="token operator">:=</span> <span class="token keyword">range</span> v<span class="token punctuation">.</span>b <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> bi <span class="token operator">!=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>与上一个方法类似，只不过是与[]byte的比较。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">EqualBytes</span><span class="token punctuation">(</span>b2 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> bytes<span class="token punctuation">.</span><span class="token function">Equal</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">,</span> b2<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	l <span class="token operator">:=</span> v<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span> <span class="token operator">!=</span> l <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">false</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> i<span class="token punctuation">,</span> bi <span class="token operator">:=</span> <span class="token keyword">range</span> b2 <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> bi <span class="token operator">!=</span> v<span class="token punctuation">.</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token boolean">false</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>调用NewReader方法返回io.ReadSeeker类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">Reader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> io<span class="token punctuation">.</span>ReadSeeker <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> bytes<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>从ByteView指定位置读取数据拷贝到[]byte中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">ReadAt</span><span class="token punctuation">(</span>p <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> off <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> off <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"view: invalid offset"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> off <span class="token operator">>=</span> <span class="token function">int64</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> io<span class="token punctuation">.</span>EOF
	<span class="token punctuation">&#125;</span>
	n <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">SliceFrom</span><span class="token punctuation">(</span><span class="token function">int</span><span class="token punctuation">(</span>off<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>
	<span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">=</span> io<span class="token punctuation">.</span>EOF
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>读取数据写入到ByteView中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token function">WriteTo</span><span class="token punctuation">(</span>w io<span class="token punctuation">.</span>Writer<span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">var</span> m <span class="token builtin">int</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		m<span class="token punctuation">,</span> err <span class="token operator">=</span> w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		m<span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">WriteString</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> v<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token operator">&amp;&amp;</span> m <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		err <span class="token operator">=</span> io<span class="token punctuation">.</span>ErrShortWrite
	<span class="token punctuation">&#125;</span>
	n <span class="token operator">=</span> <span class="token function">int64</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析6:sink.go</title>
    <url>/2020/03/21/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%906/</url>
    <content><![CDATA[<p>sink.go文件实际上也是提供数据结构，在ByteView之上做了一层封装。</p>
<a id="more"></a>

<ol>
<li><p>Sink接口，提供三个set方法和一个view方法，view方法返回ByteView。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Sink <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">SetString</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span>

	<span class="token function">SetBytes</span><span class="token punctuation">(</span>v <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span>

	<span class="token function">SetProto</span><span class="token punctuation">(</span>m proto<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">error</span>

	<span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>[]byte类型拷贝。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token punctuation">&#123;</span>
	c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token function">copy</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> b<span class="token punctuation">)</span>
	<span class="token keyword">return</span> c
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>setSinkView方法，将一个ByteView内容设置到Sink中。注意这里viewSetter的使用，通过它去断言s是否包含setView方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">setSinkView</span><span class="token punctuation">(</span>s Sink<span class="token punctuation">,</span> v ByteView<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">type</span> viewSetter <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
		<span class="token function">setView</span><span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token builtin">error</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> vs<span class="token punctuation">,</span> ok <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token punctuation">(</span>viewSetter<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> vs<span class="token punctuation">.</span><span class="token function">setView</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">SetBytes</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">SetString</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>文件中定义了不少实现Sink接口的结构体，但是代码中实际只用到了allocBytesSink。我们这里只单独分析一下它。创建方法和allocBytesSink结构体定义。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">AllocatingByteSliceSink</span><span class="token punctuation">(</span>dst <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> Sink <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token operator">&amp;</span>allocBytesSink<span class="token punctuation">&#123;</span>dst<span class="token punctuation">:</span> dst<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> allocBytesSink <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	dst <span class="token operator">*</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span> <span class="token comment">//这里有一个疑问，此属性有什么用呢？看代码它还是一个新分配地址，但是view方法并不需要它啊。</span>
	v   ByteView
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>view方法没啥可说的。值得注意得是另一个setView方法，我们可以使用第2步中的setSinkView方法来赋值。还有一个有意思的点，如果v存储了[]byte，那么cloneBytes方法创建出了一个新的切片赋值，否则通过string转[]byte生成一个新的切片赋值(一个新知识点：[]byte的变量赋值指向同一个地址，string和[]byte的转换是数据复制)。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>allocBytesSink<span class="token punctuation">)</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span>v<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>allocBytesSink<span class="token punctuation">)</span> <span class="token function">setView</span><span class="token punctuation">(</span>v ByteView<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> v<span class="token punctuation">.</span>b <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">*</span>s<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>b<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">*</span>s<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>s<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	s<span class="token punctuation">.</span>v <span class="token operator">=</span> v
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用[]byte设置s和v</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>allocBytesSink<span class="token punctuation">)</span> <span class="token function">setBytesOwned</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>dst <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"nil AllocatingByteSliceSink *[]byte dst"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">*</span>s<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token function">cloneBytes</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">// clone后赋值，如果b被更改，这里的dst不会变</span>
	s<span class="token punctuation">.</span>v<span class="token punctuation">.</span>b <span class="token operator">=</span> b
	s<span class="token punctuation">.</span>v<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">""</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>通过proto的Message类型和[]byte类型进行赋值，内部均调用了上面setBytesOwned方法</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>allocBytesSink<span class="token punctuation">)</span> <span class="token function">SetProto</span><span class="token punctuation">(</span>m proto<span class="token punctuation">.</span>Message<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	b<span class="token punctuation">,</span> err <span class="token operator">:=</span> proto<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">setBytesOwned</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>allocBytesSink<span class="token punctuation">)</span> <span class="token function">SetBytes</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">setBytesOwned</span><span class="token punctuation">(</span><span class="token function">cloneBytes</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>string类型的赋值</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>s <span class="token operator">*</span>allocBytesSink<span class="token punctuation">)</span> <span class="token function">SetString</span><span class="token punctuation">(</span>v <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> s<span class="token punctuation">.</span>dst <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"nil AllocatingByteSliceSink *[]byte dst"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token operator">*</span>s<span class="token punctuation">.</span>dst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span>
	s<span class="token punctuation">.</span>v<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token boolean">nil</span>
	s<span class="token punctuation">.</span>v<span class="token punctuation">.</span>s <span class="token operator">=</span> v
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析7:peers.go</title>
    <url>/2020/03/22/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%907/</url>
    <content><![CDATA[<p>peers.go文件的主要作用是用来定义如何查找和与其他peer沟通，peer的中文翻译为同伴，可以理解为其他机器。</p>
<a id="more"></a>

<ol>
<li><p>ProtoGetter必须被一个peer实现，他有一个Get方法用来获取返回值。PeerPicker接口是用来根据key寻找peer，如果返回nil,false，那么说明，该缓存的拥有者为自身。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> ProtoGetter <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>pb<span class="token punctuation">.</span>GetRequest<span class="token punctuation">,</span> out <span class="token operator">*</span>pb<span class="token punctuation">.</span>GetResponse<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> PeerPicker <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">PickPeer</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>peer ProtoGetter<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>NoPeers结构体，表示没有找到peer。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> NoPeers <span class="token keyword">struct</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>NoPeers<span class="token punctuation">)</span> <span class="token function">PickPeer</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>peer ProtoGetter<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>变量portPicker是一个func，返回值为PeerPicker，只能被定义一次。RegisterPeerPicker和RegisterPerGroupPeerPicker两者之一会被调用，调用时机为第一个group创建时，目的是为portPicker赋值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>
	portPicker <span class="token keyword">func</span><span class="token punctuation">(</span>groupName <span class="token builtin">string</span><span class="token punctuation">)</span> PeerPicker
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">RegisterPeerPicker</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> PeerPicker<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> portPicker <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"RegisterPeerPicker called more than once"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	portPicker <span class="token operator">=</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token boolean">_</span> <span class="token builtin">string</span><span class="token punctuation">)</span> PeerPicker <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">RegisterPerGroupPeerPicker</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span>groupName <span class="token builtin">string</span><span class="token punctuation">)</span> PeerPicker<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> portPicker <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"RegisterPeerPicker called more than once"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	portPicker <span class="token operator">=</span> fn
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>getPeers用来返回注册的PeerPicker方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">getPeers</span><span class="token punctuation">(</span>groupName <span class="token builtin">string</span><span class="token punctuation">)</span> PeerPicker <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> portPicker <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> NoPeers<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	pk <span class="token operator">:=</span> <span class="token function">portPicker</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> pk <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		pk <span class="token operator">=</span> NoPeers<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> pk
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析8:http.go</title>
    <url>/2020/03/24/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%908/</url>
    <content><![CDATA[<p>http.go定义了groupcache接收到http请求时怎么去执行操作，算是一个主要流程文件。</p>
<a id="more"></a>

<ol>
<li><p>定义两个常量，作为服务的默认值，defaultBasePath是请求路径，defaultReplicas是前面一致性哈希提到的单台机器虚拟结点数。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> defaultBasePath <span class="token operator">=</span> <span class="token string">"/_groupcache/"</span>

<span class="token keyword">const</span> defaultReplicas <span class="token operator">=</span> <span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>HTTPPool为文件的核心，它是一个实现了PeerPicker接口的peer池。Context是上下文返回方法，如果没有设置使用默认的。Transport返回http.RoundTripper，没有同样使用默认的，它相当于http请求的中间件。self默认地址。opts为相关配置。改动peers和httpGetters时，通过mu来加锁。peers是之前一致性哈希章节中定义的结构体类型，用来存取peer。httpGetters存储地址与httpGetter对应关系。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> HTTPPool <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Context <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> context<span class="token punctuation">.</span>Context

	Transport <span class="token keyword">func</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>RoundTripper

	self <span class="token builtin">string</span>

	opts HTTPPoolOptions

	mu          sync<span class="token punctuation">.</span>Mutex 
	peers       <span class="token operator">*</span>consistenthash<span class="token punctuation">.</span>Map
	httpGetters <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>httpGetter
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>HTTPPool用到的配置项。HashFn是哈希计算方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> HTTPPoolOptions <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	BasePath <span class="token builtin">string</span>
	Replicas <span class="token builtin">int</span>
	HashFn consistenthash<span class="token punctuation">.</span>Hash
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>创建方法，NewHTTPPoolOpts返回一个*HTTPPool，因为它实现了ServeHTTP，被注册为http处理方法。httpPoolMade变量保证HTTPPool只会被初始化一次。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewHTTPPool</span><span class="token punctuation">(</span>self <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>HTTPPool <span class="token punctuation">&#123;</span>
	p <span class="token operator">:=</span> <span class="token function">NewHTTPPoolOpts</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>BasePath<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
	<span class="token keyword">return</span> p
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> httpPoolMade <span class="token builtin">bool</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>NewHTTPPoolOpts逻辑不复杂，主要是为结构体赋值，HTTPPool实现了PeerPicker接口，通过RegisterPeerPicker注册。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewHTTPPoolOpts</span><span class="token punctuation">(</span>self <span class="token builtin">string</span><span class="token punctuation">,</span> o <span class="token operator">*</span>HTTPPoolOptions<span class="token punctuation">)</span> <span class="token operator">*</span>HTTPPool <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> httpPoolMade <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"groupcache: NewHTTPPool must be called only once"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	httpPoolMade <span class="token operator">=</span> <span class="token boolean">true</span>

	p <span class="token operator">:=</span> <span class="token operator">&amp;</span>HTTPPool<span class="token punctuation">&#123;</span>
		self<span class="token punctuation">:</span>        self<span class="token punctuation">,</span>
		httpGetters<span class="token punctuation">:</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>httpGetter<span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> o <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		p<span class="token punctuation">.</span>opts <span class="token operator">=</span> <span class="token operator">*</span>o
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>BasePath <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>
		p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>BasePath <span class="token operator">=</span> defaultBasePath
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>Replicas <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>Replicas <span class="token operator">=</span> defaultReplicas
	<span class="token punctuation">&#125;</span>
	p<span class="token punctuation">.</span>peers <span class="token operator">=</span> consistenthash<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>Replicas<span class="token punctuation">,</span> p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>HashFn<span class="token punctuation">)</span>

	<span class="token function">RegisterPeerPicker</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> PeerPicker <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> p <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> p
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Set方法更新内容。先加锁，往peers写数据，然后再往httpGetters写数据。可以看到httpGetters的key是peer地址，val包含Transport和实际服务的url。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HTTPPool<span class="token punctuation">)</span> <span class="token function">Set</span><span class="token punctuation">(</span>peers <span class="token operator">...</span><span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	p<span class="token punctuation">.</span>peers <span class="token operator">=</span> consistenthash<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>Replicas<span class="token punctuation">,</span> p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>HashFn<span class="token punctuation">)</span> <span class="token comment">//这里问什么又要new一次，没太看明白</span>
	p<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>peers<span class="token operator">...</span><span class="token punctuation">)</span>
	p<span class="token punctuation">.</span>httpGetters <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>httpGetter<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>peers<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> peer <span class="token operator">:=</span> <span class="token keyword">range</span> peers <span class="token punctuation">&#123;</span>
		p<span class="token punctuation">.</span>httpGetters<span class="token punctuation">[</span>peer<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>httpGetter<span class="token punctuation">&#123;</span>transport<span class="token punctuation">:</span> p<span class="token punctuation">.</span>Transport<span class="token punctuation">,</span> baseURL<span class="token punctuation">:</span> peer <span class="token operator">+</span> p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>BasePath<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>PickPeer是根据请求的key来返回一个ProtoGetter，这里的数据结构都在peer.go中定义过。我们只要记住这个方法是通过key来得到对应的peer即可。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HTTPPool<span class="token punctuation">)</span> <span class="token function">PickPeer</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ProtoGetter<span class="token punctuation">,</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> p<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">IsEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> peer <span class="token operator">:=</span> p<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> peer <span class="token operator">!=</span> p<span class="token punctuation">.</span>self <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> p<span class="token punctuation">.</span>httpGetters<span class="token punctuation">[</span>peer<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>这个方法是我们接收到http请求实际去执行操作。先解析请求路径，获取group和key。通过名称获取Group对象，调用他的Get方法获取返回值（至于Group的具体内部定义我们下一篇会说）。封装数据，输出。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>p <span class="token operator">*</span>HTTPPool<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span> p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>BasePath<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"HTTPPool serving unexpected path: "</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	parts <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">SplitN</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>opts<span class="token punctuation">.</span>BasePath<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>parts<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"bad request"</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusBadRequest<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	groupName <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
	key <span class="token operator">:=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

	group <span class="token operator">:=</span> <span class="token function">GetGroup</span><span class="token punctuation">(</span>groupName<span class="token punctuation">)</span>
	<span class="token keyword">if</span> group <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"no such group: "</span><span class="token operator">+</span>groupName<span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusNotFound<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">var</span> ctx context<span class="token punctuation">.</span>Context
	<span class="token keyword">if</span> p<span class="token punctuation">.</span>Context <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		ctx <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		ctx <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">Context</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	group<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>ServerRequests<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">var</span> value <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span>
	err <span class="token operator">:=</span> group<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token function">AllocatingByteSliceSink</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>

	body<span class="token punctuation">,</span> err <span class="token operator">:=</span> proto<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>GetResponse<span class="token punctuation">&#123;</span>Value<span class="token punctuation">:</span> value<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		http<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> http<span class="token punctuation">.</span>StatusInternalServerError<span class="token punctuation">)</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-protobuf"</span><span class="token punctuation">)</span>
	w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>httpGetter结构体封装了两个属性。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> httpGetter <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	transport <span class="token keyword">func</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> http<span class="token punctuation">.</span>RoundTripper
	baseURL   <span class="token builtin">string</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>sync.Pool的概念可以参看这片文章<a href="https://www.jianshu.com/p/494cda4db297">https://www.jianshu.com/p/494cda4db297</a><br>。大概意思就是它提供了一个池子的功能，在里面会维护一定数目的对象，这样在高并发场景下，我们可以降低内存申请的开销。如果池子中没有可用对象，会调用New方法来初始化一个。使用完后通过Put方法将对象放回池中。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> bufferPool <span class="token operator">=</span> sync<span class="token punctuation">.</span>Pool<span class="token punctuation">&#123;</span>
	New<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token function">new</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>这是我们请求其他peer获取返回值的方法。先拼接请求路径，执行http请求。返回值的处理：从bufferPool中获取一个对象，Reset将其置空，copy得到返回值，然后解析成为对象。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>h <span class="token operator">*</span>httpGetter<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> in <span class="token operator">*</span>pb<span class="token punctuation">.</span>GetRequest<span class="token punctuation">,</span> out <span class="token operator">*</span>pb<span class="token punctuation">.</span>GetResponse<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	u <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span>
		<span class="token string">"%v%v/%v"</span><span class="token punctuation">,</span>
		h<span class="token punctuation">.</span>baseURL<span class="token punctuation">,</span>
		url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">GetGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		url<span class="token punctuation">.</span><span class="token function">QueryEscape</span><span class="token punctuation">(</span>in<span class="token punctuation">.</span><span class="token function">GetKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	<span class="token punctuation">)</span>
	req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>
	req <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">WithContext</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	tr <span class="token operator">:=</span> http<span class="token punctuation">.</span>DefaultTransport
	<span class="token keyword">if</span> h<span class="token punctuation">.</span>transport <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		tr <span class="token operator">=</span> h<span class="token punctuation">.</span><span class="token function">transport</span><span class="token punctuation">(</span>ctx<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	res<span class="token punctuation">,</span> err <span class="token operator">:=</span> tr<span class="token punctuation">.</span><span class="token function">RoundTrip</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">defer</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> res<span class="token punctuation">.</span>StatusCode <span class="token operator">!=</span> http<span class="token punctuation">.</span>StatusOK <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"server returned: %v"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>Status<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	b <span class="token operator">:=</span> bufferPool<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token operator">*</span>bytes<span class="token punctuation">.</span>Buffer<span class="token punctuation">)</span>
	b<span class="token punctuation">.</span><span class="token function">Reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> bufferPool<span class="token punctuation">.</span><span class="token function">Put</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> res<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"reading response body: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	err <span class="token operator">=</span> proto<span class="token punctuation">.</span><span class="token function">Unmarshal</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">Bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"decoding response body: %v"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>征服者：葡萄牙帝国的崛起</title>
    <url>/2020/10/28/%E8%AF%BB%E4%B9%A6/11%E5%BE%81%E6%9C%8D%E8%80%85%EF%BC%9A%E8%91%A1%E8%90%84%E7%89%99%E5%B8%9D%E5%9B%BD%E7%9A%84%E5%B4%9B%E8%B5%B7/</url>
    <content><![CDATA[<p>因为读这本书到完成这篇读后感中间隔了蛮久时间，发生了一些事情，那股新鲜感已经不在，加上书中内容颇杂，出场人物和事件过多，就大概写一点现在还有的感触吧。</p>
<a id="more"></a>

<p>这本书的契机是一次去书店闲逛，看到一本叫做《最后的十字军东征》的书，当年玩p社游戏，对这一段历史颇感兴趣。但实体书有点贵，没买。回来一搜，说大部分类容与《征服者：葡萄牙帝国的崛起》相同，且后者评分更高，趁着网上书店做活动入手了。</p>
<p>前半部分印象比较深，尤其是恩里克、迪亚士、达伽马那一段关于印度航路的开拓史，解决了我心中的很多疑惑。欧洲为什么着了魔似的要开拓前往印度的航路，为什么香料对欧洲人有如此大的魔力。</p>
<p>后半部分殖民地开拓史，大概只记得几位总督的不同行事风格，烧杀抢掠，然后不停修筑要塞了。</p>
<p>资本的开拓史，是一部血腥史，是利益史，同样也是科技的进步史。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>被讨厌的勇气</title>
    <url>/2020/08/08/%E8%AF%BB%E4%B9%A6/10%E8%A2%AB%E8%AE%A8%E5%8E%8C%E7%9A%84%E5%8B%87%E6%B0%94/</url>
    <content><![CDATA[<p>久闻弗洛伊德大名，现在又知道了阿德勒。</p>
<a id="more"></a>

<p>日常中自己是个“原因论”信奉者，相信有因必有果。然而作者在一开始就抛出的“目的论”，实实在在是惊艳了我。“目的论”可以算作是“原因论”的一个逆向，刷新了我看待问题的方式。因为有这样的目的，所以我们才产生了相应的行为。基于此我们了解到，自卑等心理其实并不是我们真的不幸，而仅仅是为了达到自我保护的目的，因为这样我们可以更享受这种停滞不前的状态。自卑情结与优越情结存在密切联系，自负和夸耀不幸是两种表现形式，目的是为了证明自己的独特性。个人是可以改变的，但是这需要勇气。</p>
<p>人的一切烦恼来自于人际关系。来自于工作、交友和爱这三大课题。竞争关系产生了胜者和败者，无法真心祝福是因为把别人的成功看作了自己的失败。</p>
<p>我们不是为了别人的期待而活着，别人也不是为了满足你的期待而活。学会考虑课题分离。自由是具有被人讨厌的勇气。</p>
<p>我们时刻处于多个共同体之中，在当前共同体中的烦恼可以通过倾听更大共同体来解决。不是干涉而是援助，拒绝表扬批评而是鼓励。人只有在能够感觉自己有价值的时候才可以获得勇气。人的存在本身会给别人带来价值。努力与别人建立横向关系，重要的是意识上的平等和坚持自己的主张。</p>
<p>自我接纳，他者信赖，他者贡献。把对自己的执着变成对他人的关心。幸福就是贡献感。人生是刹那的连续，根本不存在过去和未来，认真地活在此时此刻。并不存在普遍性的人生意义，人生的意义是自己赋予自己的。</p>
<p>总结：<br>自卑是普遍存在的一种人生常态，不可能事事如意，勇于被别人讨厌和自我接纳，并在更大共同体中寻求贡献感，努力活在当下，赋予自己的人生以意义。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>青年自幼就缺乏自信，他对自己的出身、学历甚至容貌都抱有强烈的自卑感。也许是因为这样，他往往过于在意他人的目光；而且，他无法衷心地去祝福别人的幸福，从而常常陷入自我嫌恶的痛苦境地。</p>
</blockquote>
<blockquote>
<p>任何经历本身并不是成功或者失败的原因。我们并非因为自身经历中的刺激——所谓的心理创伤——而痛苦，事实上我们会从经历中发现符合自己目的的因素。决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。</p>
</blockquote>
<blockquote>
<p>为什么那么急于得到答案呢？答案不应该是从别人那里得到，而应该是自己亲自找出来。从别人那里得到的答案只不过是对症疗法而已，没有什么价值。</p>
</blockquote>
<blockquote>
<p>重要的不是被给予了什么，而是如何去利用被给予的东西。</p>
</blockquote>
<blockquote>
<p>你在人生的某个阶段里选择了“不幸”。这既不是因为你生在了不幸的环境中，也不是因为你陷入了不幸的境地中，而是因为你认为“不幸”对你自身而言是一种“善”。</p>
</blockquote>
<blockquote>
<p>要想改变生活方式需要很大的“勇气”。面对变化产生的“不安”与不变带来的“不满”，你一定是选择了后者。</p>
</blockquote>
<blockquote>
<p>实际上，他是想通过不去比赛这一方式来保留一种“如果做的话我也可以”的可能性，即不愿出去被人评价，更不愿去面对因作品拙劣而落选的现实。</p>
</blockquote>
<blockquote>
<p>阿德勒的目的论是说：“无论之前的人生发生过什么，都对今后的人生如何度过没有影响。”决定自己人生的是活在“此时此刻”的你自己。</p>
</blockquote>
<blockquote>
<p>承认就是很了不起的态度。但是，请你不要忘记，在人际关系中根本不可能不受伤。只要涉入人际关系就会或大或小地受伤，也会伤害别人。阿德勒曾说“要想消除烦恼，只有一个人在宇宙中生存”。但是，那种事情根本就无法做到。</p>
</blockquote>
<blockquote>
<p>之所以感觉孤独并不是因为只有你自己一个人，感觉自己被周围的他人、社会和共同体所疏远才会孤独。我们要想体会孤独也需要有他人的存在。也就是说，人只有在社会关系中才会成为“个人”。</p>
</blockquote>
<blockquote>
<p>首先，人是作为一种无力的存在活在这个世界上。并且，人希望摆脱这种无力状态，继而就有了普遍欲求。阿德勒称其为“追求优越性”。</p>
</blockquote>
<blockquote>
<p>这是一种通过把自卑感尖锐化来实现异常优越感的模式。具体就是指夸耀不幸。</p>
</blockquote>
<blockquote>
<p>健全的自卑感不是来自与别人的比较，而是来自与“理想的自己”的比较。</p>
</blockquote>
<blockquote>
<p>无法真心祝福过得幸福的他人”，那就是因为站在竞争的角度来考虑人际关系，把他人的幸福看作“我的失败”，所以才无法给予祝福。</p>
</blockquote>
<blockquote>
<p>易怒的人并不是性情急躁，而是不了解发怒以外的有效交流工具。所以才会说“不由得发火”之类的话。这其实是在借助发怒来进行交流。</p>
</blockquote>
<blockquote>
<p>关于权力之争，还有一点需要注意。那就是无论认为自己多么正确，也不要以此为理由去责难对方。这是很多人都容易陷落进去的人际关系圈套。</p>
</blockquote>
<blockquote>
<p>因为不想失败，所以就不愿承认自己的错误，结果就会选择错误的道路。承认错误、赔礼道歉、退出权力之争，这些都不是“失败”。追求优越性并不是通过与他人的竞争来完成的。</p>
</blockquote>
<blockquote>
<p>行为方面的目标有“自立”和“与社会和谐共处”这两点。而且，支撑这种行为的心理方面的目标是“我有能力”以及“人人都是我的伙伴”这两种意识。</p>
</blockquote>
<blockquote>
<p>当人能够感觉到“与这个人在一起可以无拘无束”的时候，才能够体会到爱。既没有自卑感也不必炫耀优越性，能够保持一种平静而自然的状态。真正的爱应该是这样的。</p>
</blockquote>
<blockquote>
<p>那就是，决定你的生活方式（人生状态）的不是其他任何人，而是你自己这一事实。</p>
</blockquote>
<blockquote>
<p>在犹太教教义中有这么一句话：“倘若自己都不为自己活出自己的人生，那还有谁会为自己而活呢？”</p>
</blockquote>
<blockquote>
<p>基本上，一切人际关系矛盾都起因于对别人的课题妄加干涉或者自己的课题被别人妄加干涉。只要能够进行课题分离，人际关系就会发生巨大改变。</p>
</blockquote>
<blockquote>
<p>首先要思考一下“这是谁的课题”。然后进行课题分离——哪些是自己的课题，哪些是别人的课题，要冷静地划清界限。而且，不去干涉别人的课题也不让别人干涉自己的课题。这就是阿德勒心理学给出的具体而且有可能彻底改变人际关系烦恼的具有划时代意义的观点。</p>
</blockquote>
<blockquote>
<p>选择了不自由生活方式的大人看着自由活在当下的年轻人就会批判其“享乐主义”。当然，这其实是为了让自己接受不自由生活而捏造出的一种人生谎言。选择了真正自由的大人就不会说这样的话，相反还会鼓励年轻人要勇于争取自由。</p>
</blockquote>
<blockquote>
<p>不畏惧被人讨厌而是勇往直前，不随波逐流而是激流勇进，这才是对人而言的自由。</p>
</blockquote>
<blockquote>
<p>把对自己的执著（self interest）变成对他人的关心（social interest）。</p>
</blockquote>
<blockquote>
<p>在只关心“我”这个意义上来讲，是以自我为中心。你正因为不想被他人认为自己不好，所以才在意他人的视线。这不是对他人的关心，而是对自己的执著。</p>
</blockquote>
<blockquote>
<p>这里有需要记住的行动原则。当我们在人际关系中遇到困难或者看不到出口的时候，首先应该考虑的是“倾听更大共同体的声音”这一原则。</p>
</blockquote>
<blockquote>
<p>人怎样才能够获得“勇气”？阿德勒的见解是：人只有在能够感觉自己有价值的时候才可以获得勇气。</p>
</blockquote>
<blockquote>
<p>而应不将自己的孩子跟任何人相比，就把他看作他自己，对他的存在心怀喜悦与感激，不要按照理想形象去扣分，而是从零起点出发。如果是这样的话，那就能够对“存在”本身表示感谢了。</p>
</blockquote>
<blockquote>
<p>必须得有人开始。即使其他人不合作，那也跟你没关系。我的意见就是这样：应该由你来开始。不必去考虑他人是否合作。</p>
</blockquote>
<blockquote>
<p>并不是说将任何人都变成朋友或者像对待朋友一样去对待每一个人，不是这样的，重要的是意识上的平等以及坚持自己应有的主张。</p>
</blockquote>
<blockquote>
<p>悲伤的时候尽管悲伤就可以。因为，正是想要逃避痛苦或悲伤才不敢付诸行动，以至于与任何人都无法建立起深厚的关系。</p>
</blockquote>
<blockquote>
<p>也就是说，要想获得归属感就必须把他人看作伙伴，而要做到视他人为伙伴就需要自我接纳和他者信赖。</p>
</blockquote>
<blockquote>
<p>正因为接受了真实的自我——也就是“自我接纳”——才能够不惧背叛地做到“他者信赖”；而且，正因为对他人给予无条件的信赖并能够视他人为自己的伙伴，才能够做到“他者贡献”；同时，正因为对他人有所贡献，才能够体会到“我对他人有用”进而接受真实的自己，做到“自我接纳”。</p>
</blockquote>
<blockquote>
<p>人际关系不顺利既不是因为口吃也不是因为脸红恐惧症，真正的问题在于无法做到自我接纳、他者信赖和他者贡献，却将焦点聚集到微不足道的一个方面并企图以此来评价整个世界。这就是缺乏人生和谐的错误生活方式。</p>
</blockquote>
<blockquote>
<p>“因为工作忙，所以无暇顾及家庭。”但是，这其实是人生的谎言。只不过是以工作为借口来逃避其他责任。本来家务、育儿、交友或兴趣应该全都给予关心，阿德勒不认可任何一方面突出的生活方式。</p>
</blockquote>
<blockquote>
<p>“工作”并不仅仅是指在公司上班。家庭里的工作、育儿、对地域社会的贡献、兴趣等，这一切都是“工作”，公司等只不过是一小部分而已。</p>
</blockquote>
<blockquote>
<p>对人而言，最大的不幸就是不喜欢自己。对于这种现实，阿德勒准备了极其简单的回答——“我对共同体有益”或者“我对他人有用”这种想法就足以让人体会到自己的价值。</p>
</blockquote>
<blockquote>
<p>判断你的贡献是否起作用的不是你，那是他人的课题，是你无法干涉的问题。是否真正作出了贡献，从原理上根本无从了解。也就是说，进行他者贡献时候的我们即使作出看不见的贡献，只要能够产生“我对他人有用”的主观感觉即“贡献感”也可以。</p>
</blockquote>
<blockquote>
<p>通过认可欲求获得的贡献感没有自由。但我们人类是在选择自由的同时也在追求幸福。</p>
</blockquote>
<blockquote>
<p>人只有在能够感觉到“我对别人有用”的时候才能体会到自己的价值。但是，这种贡献也可以通过看不见的形式实现。只要有“对别人有用”的主观感觉，即“贡献感”就可以。并且，哲人还得出了这样的结论：幸福就是“贡献感”。</p>
</blockquote>
<blockquote>
<p>拒绝普通的你也许是把“普通”理解成了“无能”吧。普通并不等于无能，我们根本没必要特意炫耀自己的优越性。</p>
</blockquote>
<blockquote>
<p>是“现在”这一刹那的连续。我们只能活在“此时此刻”，我们的人生只存在于刹那之中。</p>
</blockquote>
<blockquote>
<p>人生就像是在每一个瞬间不停旋转起舞的连续的刹那。并且，暮然四顾时常常会惊觉：“已经来到这里了吗？”</p>
</blockquote>
<blockquote>
<p>人生是连续的刹那，根本不存在过去和未来。你是想要通过关注过去或未来为自己寻找免罪符。过去发生了什么与你的“此时此刻”没有任何关系，未来会如何也不是“此时此刻”要考虑的问题。假如认真地活在“此时此刻”，那就根本不会说出那样的话。</p>
</blockquote>
<blockquote>
<p>你自己的人生也同样。为遥远的将来设定一个目标，并认为现在是其准备阶段。一直想着“真正想做的是这样的事情，等时机到了就去做”，是一种拖延人生的生活方式。只要在拖延人生，我们就会无所进展，只能每天过着枯燥乏味的单调生活。因为在这种情况下，人就会认为“此时此刻”只是准备阶段和忍耐阶段。但是，为了遥远将来的考试而努力学习的“此时此刻”却是真实的存在。</p>
</blockquote>
<blockquote>
<p>人生中最大的谎言就是不活在“此时此刻”。纠结过去、关注未来，把微弱而模糊的光打向人生整体，自认为看到了些什么。你之前就一直忽略“此时此刻”，只关注根本不存在的过去和未来。对自己的人生和无可替代的刹那撒了一个大大的谎言。</p>
</blockquote>
<blockquote>
<p>再送给你一句阿德勒的话：“必须有人开始。即使别人不合作，那也与你无关。我的意见就是这样。应该由你开始，不用去考虑别人是否合作。”</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>杀死一只知更鸟</title>
    <url>/2020/11/01/%E8%AF%BB%E4%B9%A6/12%E6%9D%80%E6%AD%BB%E4%B8%80%E5%8F%AA%E7%9F%A5%E6%9B%B4%E9%B8%9F/</url>
    <content><![CDATA[<p>书分成两部分，第一部分是我、杰姆、迪儿对怪人拉德利无比的好奇心引发的一系列探寻活动，并借此勾画了梅科姆镇风貌。第二部分是阿蒂克斯为黑人汤姆对白人的强奸案做辩护，而遭到其他白人谴责。在无罪证据明显的情况下，仍然输掉诉讼案，并遭到由厄尔报复。</p>
<a id="more"></a>

<p>在没有读本书的时候，自己已经在网上大致了解了相关故事内容，本以为是一场主要说律师辩护的小说，读完才发现其实这只占有很少的一部分。</p>
<p>我想要用几个词来概括下全书的主题，它们分别是偏见、勇气、平等、群体、善良。</p>
<p>偏见，怪人拉德利的故事贯穿全书始终，因为他始终不出门，所以小镇上关于他的谣言很多，小孩子怕他，不敢从他门前路过。而主角三人却因为强烈的好奇心，想要一探究竟，甚至于半夜闯入民宅差点遭遇枪击。</p>
<p>勇气，美国是一个种族歧视很严重的社会，黑人地位低下，常遭遇不公正待遇。书中的汤姆在证据不充分的情况下被控告强奸白人的罪名。阿蒂克斯被指定为汤姆的辩护律师，在遭遇小镇市民、亲戚等的反对下，仍然力排众议，坚持为汤姆辩护。在斯库特为了维护父亲声誉而动手时，告诉她不要因为别人的挑衅而打架。在法庭上拆穿了由厄尔的谎言，却最终因为陪审团的决定而败诉。</p>
<p>平等，书中想要宣扬的人类生而平等，不要因为肤色而遭受不公正对待。白人中也有败类，黑人中也不乏正直与良知。</p>
<p>群体，陪审团制度中，其中的每一个人都是个普通人，基于良知的判断最后却给予了汤姆死刑的判决。人在群体中，会受到干扰，进而降低本身的理智。</p>
<p>善良，最后在由厄尔的报复下救了孩子的是怪人拉德利，就像阿蒂克斯所说“斯库特，当你最终了解他们时，你会发现，大多数人都是好人”。</p>
<p>归根结底这是一本有关于教养的书，告诉我们如何成为一个正直的人。</p>
<p>等我以后有了小孩，我想我会陪他一起再读一读这本书的。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>groupcache源码分析9:groupcache.go</title>
    <url>/2020/03/29/groupcache/groupcache%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%909/</url>
    <content><![CDATA[<p>终于到了最后一个文件groupcache.go，跟项目同名，看着就知道它的重要性了。前面我们分析了那么多，这一篇就来看看如何利用那些零件，来具体去实现整个缓存逻辑。</p>
<a id="more"></a>

<ol>
<li><p>Getter接口，又一个Get方法，根据key查询到对应值，保存到dest中。GetterFunc是一个实现了Getter接口的func类型。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Getter <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> dest Sink<span class="token punctuation">)</span> <span class="token builtin">error</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> GetterFunc <span class="token keyword">func</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> dest Sink<span class="token punctuation">)</span> <span class="token builtin">error</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>f GetterFunc<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> dest Sink<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>定义一些使用到的变量。groups保存group与其对应结构体，initPeerServerOnce是一个sync.Once，它能保证Do方法只会被执行一次，实际上就是保证initPeerServer只会被执行一次。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>
	mu     sync<span class="token punctuation">.</span>RWMutex
	groups <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>Group<span class="token punctuation">)</span>

	initPeerServerOnce sync<span class="token punctuation">.</span>Once
	initPeerServer     <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>读锁并获取group名称对应的对象。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">GetGroup</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">*</span>Group <span class="token punctuation">&#123;</span>
	mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	g <span class="token operator">:=</span> groups<span class="token punctuation">[</span>name<span class="token punctuation">]</span>
	mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> g
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>创建Group，名称需保证唯一。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">NewGroup</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> cacheBytes <span class="token builtin">int64</span><span class="token punctuation">,</span> getter Getter<span class="token punctuation">)</span> <span class="token operator">*</span>Group <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> <span class="token function">newGroup</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> cacheBytes<span class="token punctuation">,</span> getter<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">newGroup</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">,</span> cacheBytes <span class="token builtin">int64</span><span class="token punctuation">,</span> getter Getter<span class="token punctuation">,</span> peers PeerPicker<span class="token punctuation">)</span> <span class="token operator">*</span>Group <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> getter <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"nil Getter"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	initPeerServerOnce<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>callInitPeerServer<span class="token punctuation">)</span> <span class="token comment">//保证callInitPeerServer只会被调用一次</span>
	<span class="token keyword">if</span> <span class="token boolean">_</span><span class="token punctuation">,</span> dup <span class="token operator">:=</span> groups<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> dup <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"duplicate registration of group "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	g <span class="token operator">:=</span> <span class="token operator">&amp;</span>Group<span class="token punctuation">&#123;</span>
		name<span class="token punctuation">:</span>       name<span class="token punctuation">,</span>
		getter<span class="token punctuation">:</span>     getter<span class="token punctuation">,</span>
		peers<span class="token punctuation">:</span>      peers<span class="token punctuation">,</span>
		cacheBytes<span class="token punctuation">:</span> cacheBytes<span class="token punctuation">,</span>
		loadGroup<span class="token punctuation">:</span>  <span class="token operator">&amp;</span>singleflight<span class="token punctuation">.</span>Group<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> fn <span class="token operator">:=</span> newGroupHook<span class="token punctuation">;</span> fn <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span> <span class="token comment">//钩子方法</span>
		<span class="token function">fn</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	groups<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> g
	<span class="token keyword">return</span> g
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>创建Group时用到的几个关联项。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> newGroupHook <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token comment">//钩子，创建Group时被调用。</span>

<span class="token keyword">func</span> <span class="token function">RegisterNewGroupHook</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token operator">*</span>Group<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
	<span class="token keyword">if</span> newGroupHook <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"RegisterNewGroupHook called more than once"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	newGroupHook <span class="token operator">=</span> fn
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">RegisterServerStart</span><span class="token punctuation">(</span>fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> initPeerServer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"RegisterServerStart called more than once"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	initPeerServer <span class="token operator">=</span> fn
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">callInitPeerServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//钩子，当第一个Group被创建时调用。</span>
	<span class="token keyword">if</span> initPeerServer <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token function">initPeerServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Group结构体的定义。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> Group <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	name       <span class="token builtin">string</span> <span class="token comment">//名称</span>
	getter     Getter <span class="token comment">//获取缓存的方法</span>
	peersOnce  sync<span class="token punctuation">.</span>Once
	peers      PeerPicker
	cacheBytes <span class="token builtin">int64</span> <span class="token comment">//缓存大小限制</span>

	mainCache cache <span class="token comment">//属于当前peer的缓存</span>
	hotCache cache <span class="token comment">//属于其他peer的缓存，但是被查询当前peer额外保存一份</span>

	loadGroup flightGroup <span class="token comment">//竞争请求，前面的singleflight.go</span>

	<span class="token boolean">_</span> <span class="token builtin">int32</span> 
	Stats Stats <span class="token comment">//统计值</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> flightGroup <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>
	<span class="token function">Do</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> fn <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> Stats <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Gets           AtomicInt <span class="token comment">//get请求总次数</span>
	CacheHits      AtomicInt <span class="token comment">//从mainCache或hotCache命中的次数</span>
	PeerLoads      AtomicInt <span class="token comment">//从其他peer获取数据的次数</span>
	PeerErrors     AtomicInt <span class="token comment">//从其他peer获取数据错误的次数</span>
	Loads          AtomicInt <span class="token comment">//非命中本peer的cache次数</span>
	LoadsDeduped   AtomicInt <span class="token comment">//同一时间多请求只记一次</span>
	LocalLoads     AtomicInt <span class="token comment">//从local获取数据总次数</span>
	LocalLoadErrs  AtomicInt <span class="token comment">//从local获取数据错误次数</span>
	ServerRequests AtomicInt <span class="token comment">//peer的所有http请求总次数</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>Name方法返回名称。initPeers对peers属性赋值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> g<span class="token punctuation">.</span>name
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">initPeers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>peers <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		g<span class="token punctuation">.</span>peers <span class="token operator">=</span> <span class="token function">getPeers</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>这个方法是Group，根据参数key查询数据，然后将值放到dest里面。这里要注意下destPopulated的逻辑。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> dest Sink<span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span>
	g<span class="token punctuation">.</span>peersOnce<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span>initPeers<span class="token punctuation">)</span> <span class="token comment">//保证initPeers只被执行一次</span>
	g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>Gets<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//统计http总数量</span>
	<span class="token keyword">if</span> dest <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"groupcache: nil dest Sink"</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	value<span class="token punctuation">,</span> cacheHit <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">lookupCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token comment">//从mainCache和hotCache中查询</span>

	<span class="token keyword">if</span> cacheHit <span class="token punctuation">&#123;</span> <span class="token comment">//查询到统计+1并返回数据</span>
		g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>CacheHits<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">return</span> <span class="token function">setSinkView</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>

	destPopulated <span class="token operator">:=</span> <span class="token boolean">false</span>
    <span class="token comment">//同时多个请求，只有真正执行了的那个call，才会destPopulated返回true</span>
    <span class="token comment">//为避免对dest中的值（实际时指针）重复赋值，只需要执行一次</span>
	value<span class="token punctuation">,</span> destPopulated<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> 
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> destPopulated <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">setSinkView</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>依次从mainCache和hotCache获取数据。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">lookupCache</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value ByteView<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>cacheBytes <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	value<span class="token punctuation">,</span> ok <span class="token operator">=</span> g<span class="token punctuation">.</span>mainCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	value<span class="token punctuation">,</span> ok <span class="token operator">=</span> g<span class="token punctuation">.</span>hotCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>加载数据。</p>
</li>
</ol>
<p>Do方法中又再次进行了lookupCache，注释里是这么说的，singleflight只能对同时重叠的调用进行处理，假设有两个请求同时错过了cache，会导致load被调用两次，不幸的情况会导致cache.nbytes做出错误的计算。</p>
<p>我们梳理一下上面这段话，按照singleflight的逻辑，如果两个请求同时进入了Do方法，因为lock的缘故，第一个获的锁的执行，第二个等待锁释放，然后拿到call的返回值，实际并未执行。一开始我没想通，这样冲突不是不存在吗，为啥还要lookupCache一次呢？事实上，可能存在这一种情况，两个请求过来都没查到缓存，然后同时进入load方法，假如现在第一个执行的比较快，在第二个还没有获取锁就执行完毕退出了，则请求二成功获取锁，执行操作并且增加cache.nbytes，那么就会计算不正确了。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">load</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> dest Sink<span class="token punctuation">)</span> <span class="token punctuation">(</span>value ByteView<span class="token punctuation">,</span> destPopulated <span class="token builtin">bool</span><span class="token punctuation">,</span> err <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>Loads<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	viewi<span class="token punctuation">,</span> err <span class="token operator">:=</span> g<span class="token punctuation">.</span>loadGroup<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> value<span class="token punctuation">,</span> cacheHit <span class="token operator">:=</span> g<span class="token punctuation">.</span><span class="token function">lookupCache</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> cacheHit <span class="token punctuation">&#123;</span>
			g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>CacheHits<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span>
		<span class="token punctuation">&#125;</span>
		g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>LoadsDeduped<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		<span class="token keyword">var</span> value ByteView
		<span class="token keyword">var</span> err <span class="token builtin">error</span>
		<span class="token keyword">if</span> peer<span class="token punctuation">,</span> ok <span class="token operator">:=</span> g<span class="token punctuation">.</span>peers<span class="token punctuation">.</span><span class="token function">PickPeer</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> ok <span class="token punctuation">&#123;</span> <span class="token comment">//获取peer，如果peer是自身返回nil</span>
			value<span class="token punctuation">,</span> err <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">getFromPeer</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> peer<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token comment">//从peer获取值</span>
			<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
				g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>PeerLoads<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
				<span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span>
			<span class="token punctuation">&#125;</span>
			g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>PeerErrors<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>			
		<span class="token punctuation">&#125;</span>
		value<span class="token punctuation">,</span> err <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">getLocally</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> dest<span class="token punctuation">)</span> <span class="token comment">//从本地获取数据</span>
		<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
			g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>LocalLoadErrs<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
			<span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> err
		<span class="token punctuation">&#125;</span>
		g<span class="token punctuation">.</span>Stats<span class="token punctuation">.</span>LocalLoads<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
		destPopulated <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token comment">// dest已经被填充</span>
		g<span class="token punctuation">.</span><span class="token function">populateCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>mainCache<span class="token punctuation">)</span> <span class="token comment">//数据加到mainCache中</span>
		<span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		value <span class="token operator">=</span> viewi<span class="token punctuation">.</span><span class="token punctuation">(</span>ByteView<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="11">
<li><p>从其他peer获取数据，peer.Get实际就是httpGetter的Get方法。这里使用了一个随机函数，一定概率会将其放入hotCache。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">getFromPeer</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> peer ProtoGetter<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	req <span class="token operator">:=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>GetRequest<span class="token punctuation">&#123;</span>
		Group<span class="token punctuation">:</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>name<span class="token punctuation">,</span>
		Key<span class="token punctuation">:</span>   <span class="token operator">&amp;</span>key<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
	res <span class="token operator">:=</span> <span class="token operator">&amp;</span>pb<span class="token punctuation">.</span>GetResponse<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	err <span class="token operator">:=</span> peer<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ByteView<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	value <span class="token operator">:=</span> ByteView<span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span> res<span class="token punctuation">.</span>Value<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span> rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		g<span class="token punctuation">.</span><span class="token function">populateCache</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>hotCache<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> value<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>getLocally中实际调用的Get方法是我们在创建Group的时候去设定的，我们会在后面实际使用中介绍。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">getLocally</span><span class="token punctuation">(</span>ctx context<span class="token punctuation">.</span>Context<span class="token punctuation">,</span> key <span class="token builtin">string</span><span class="token punctuation">,</span> dest Sink<span class="token punctuation">)</span> <span class="token punctuation">(</span>ByteView<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	err <span class="token operator">:=</span> g<span class="token punctuation">.</span>getter<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> key<span class="token punctuation">,</span> dest<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> ByteView<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> err
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> dest<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>设置缓存。假如当前缓存总大小超过了上线，那么使用lru来去除最老的值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">populateCache</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value ByteView<span class="token punctuation">,</span> cache <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> g<span class="token punctuation">.</span>cacheBytes <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

	<span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
		mainBytes <span class="token operator">:=</span> g<span class="token punctuation">.</span>mainCache<span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		hotBytes <span class="token operator">:=</span> g<span class="token punctuation">.</span>hotCache<span class="token punctuation">.</span><span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		<span class="token keyword">if</span> mainBytes<span class="token operator">+</span>hotBytes <span class="token operator">&lt;=</span> g<span class="token punctuation">.</span>cacheBytes <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span>
		<span class="token punctuation">&#125;</span>

		victim <span class="token operator">:=</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>mainCache
		<span class="token keyword">if</span> hotBytes <span class="token operator">></span> mainBytes<span class="token operator">/</span><span class="token number">8</span> <span class="token punctuation">&#123;</span>
			victim <span class="token operator">=</span> <span class="token operator">&amp;</span>g<span class="token punctuation">.</span>hotCache
		<span class="token punctuation">&#125;</span>
		victim<span class="token punctuation">.</span><span class="token function">removeOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>常量定义。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> CacheType <span class="token builtin">int</span>

<span class="token keyword">const</span> <span class="token punctuation">(</span>
	MainCache CacheType <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span>
	HotCache
<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>返回Group中的缓存统计信息。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>g <span class="token operator">*</span>Group<span class="token punctuation">)</span> <span class="token function">CacheStats</span><span class="token punctuation">(</span>which CacheType<span class="token punctuation">)</span> CacheStats <span class="token punctuation">&#123;</span>
	<span class="token keyword">switch</span> which <span class="token punctuation">&#123;</span>
	<span class="token keyword">case</span> MainCache<span class="token punctuation">:</span>
		<span class="token keyword">return</span> g<span class="token punctuation">.</span>mainCache<span class="token punctuation">.</span><span class="token function">stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> HotCache<span class="token punctuation">:</span>
		<span class="token keyword">return</span> g<span class="token punctuation">.</span>hotCache<span class="token punctuation">.</span><span class="token function">stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		<span class="token keyword">return</span> CacheStats<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>cache结构体定义，与统计信息返回方法。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> cache <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	mu         sync<span class="token punctuation">.</span>RWMutex
	nbytes     <span class="token builtin">int64</span> <span class="token comment">// 缓存大小</span>
	lru        <span class="token operator">*</span>lru<span class="token punctuation">.</span>Cache <span class="token comment">//缓存主体，lru</span>
	nhit<span class="token punctuation">,</span> nget <span class="token builtin">int64</span> <span class="token comment">//命中和请求数</span>
	nevict     <span class="token builtin">int64</span> <span class="token comment">// 驱逐数</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">stats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> CacheStats <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> CacheStats<span class="token punctuation">&#123;</span>
		Bytes<span class="token punctuation">:</span>     c<span class="token punctuation">.</span>nbytes<span class="token punctuation">,</span>
		Items<span class="token punctuation">:</span>     c<span class="token punctuation">.</span><span class="token function">itemsLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
		Gets<span class="token punctuation">:</span>      c<span class="token punctuation">.</span>nget<span class="token punctuation">,</span>
		Hits<span class="token punctuation">:</span>      c<span class="token punctuation">.</span>nhit<span class="token punctuation">,</span>
		Evictions<span class="token punctuation">:</span> c<span class="token punctuation">.</span>nevict<span class="token punctuation">,</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">type</span> CacheStats <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>
	Bytes     <span class="token builtin">int64</span>
	Items     <span class="token builtin">int64</span>
	Gets      <span class="token builtin">int64</span>
	Hits      <span class="token builtin">int64</span>
	Evictions <span class="token builtin">int64</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>添加缓存方法，基于lru的Add。注意这里的nbytes计算，包含key和val的总长度。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> value ByteView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>lru <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>lru <span class="token operator">=</span> <span class="token operator">&amp;</span>lru<span class="token punctuation">.</span>Cache<span class="token punctuation">&#123;</span>
			OnEvicted<span class="token punctuation">:</span> <span class="token keyword">func</span><span class="token punctuation">(</span>key lru<span class="token punctuation">.</span>Key<span class="token punctuation">,</span> value <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				val <span class="token operator">:=</span> value<span class="token punctuation">.</span><span class="token punctuation">(</span>ByteView<span class="token punctuation">)</span>
				c<span class="token punctuation">.</span>nbytes <span class="token operator">-=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				c<span class="token punctuation">.</span>nevict<span class="token operator">++</span>
			<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	c<span class="token punctuation">.</span>lru<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>nbytes <span class="token operator">+=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token function">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">int64</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>获取缓存。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>value ByteView<span class="token punctuation">,</span> ok <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	c<span class="token punctuation">.</span>nget<span class="token operator">++</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>lru <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	vi<span class="token punctuation">,</span> ok <span class="token operator">:=</span> c<span class="token punctuation">.</span>lru<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token operator">!</span>ok <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span>
	<span class="token punctuation">&#125;</span>
	c<span class="token punctuation">.</span>nhit<span class="token operator">++</span>
	<span class="token keyword">return</span> vi<span class="token punctuation">.</span><span class="token punctuation">(</span>ByteView<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>删除老旧数据。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">removeOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>lru <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		c<span class="token punctuation">.</span>lru<span class="token punctuation">.</span><span class="token function">RemoveOldest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>获取缓存总大小和总数量。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span>nbytes
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">items</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">&#123;</span>
	c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">defer</span> c<span class="token punctuation">.</span>mu<span class="token punctuation">.</span><span class="token function">RUnlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">itemsLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>c <span class="token operator">*</span>cache<span class="token punctuation">)</span> <span class="token function">itemsLocked</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> c<span class="token punctuation">.</span>lru <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token number">0</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token function">int64</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>lru<span class="token punctuation">.</span><span class="token function">Len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>封装方法，用来完成对int64的原子操作。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> AtomicInt <span class="token builtin">int64</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>i <span class="token operator">*</span>AtomicInt<span class="token punctuation">)</span> <span class="token function">Add</span><span class="token punctuation">(</span>n <span class="token builtin">int64</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	atomic<span class="token punctuation">.</span><span class="token function">AddInt64</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>i <span class="token operator">*</span>AtomicInt<span class="token punctuation">)</span> <span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">int64</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> atomic<span class="token punctuation">.</span><span class="token function">LoadInt64</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token builtin">int64</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>i <span class="token operator">*</span>AtomicInt<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> strconv<span class="token punctuation">.</span><span class="token function">FormatInt</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
]]></content>
      <categories>
        <category>go</category>
        <category>groupcache</category>
      </categories>
      <tags>
        <tag>groupcache</tag>
      </tags>
  </entry>
  <entry>
    <title>岛上书店</title>
    <url>/2020/11/25/%E8%AF%BB%E4%B9%A6/13%E5%B2%9B%E4%B8%8A%E4%B9%A6%E5%BA%97/</url>
    <content><![CDATA[<p>“没有谁是一座孤岛，每本书都是一个世界。”</p>
<p>我是被这句话吸引来的。</p>
<a id="more"></a>

<p>丧妻的破落书商，收养孤女，找到爱人的故事。故事情节稍老套，读下来感觉对不起这么大的名声，里面有几句话可能会带来触动。</p>
<p>不太想谈书内容，聊聊陷入低谷的人吧。</p>
<p>一个人在孤独、难过的时候，往往会钻牛角尖，这个时候需要外力，可能是某个人闯入你的生活，给你死水一样的人生带来不同。或者是内力，自己排遣，通过愉悦的事情让自己不再钻牛角尖。无非是抛弃一直去越想越坏的心态，而稍作改变。</p>
<p>前者估计很难有，毕竟不是小说，所以能做的就是后者，多走走，读读书，努力找人倾诉倾诉，然后把负能量给化解掉。</p>
<p>每个人都想要顺顺利利，可终归不会如意。如果把人生比做一本书，在低潮的时候能做的，就是继续写下去到转折点出现。</p>
<p>最近有时会陷入低谷，然后去找很多纪录片来看，发现原来有那么多人过的好，有那么多人过得不好。</p>
<p>对于每个人来说，其实有很多选择，不要自己把自己困在某个地方。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>独自生活的难处，在于不管弄出什么样的烂摊子，都不得不自己清理。</p>
</blockquote>
<blockquote>
<p>这其中最令人恼火的是，一旦一个人在乎一件事，就发现自己不得不开始在乎一切事。</p>
</blockquote>
<blockquote>
<p>“因为从心底害怕自己不值得被爱，我们独来独往，”那一段是这样的，“然而就是因为独来独往，才让我们以为自己不值得被爱。有一天，你不知道是什么时候，你会驱车上路。有一天，你不知道是什么时候，你会遇到他（她）。你会被爱，因为你今生第一次真正不再孤单。你会选择不再孤单下去。”</p>
</blockquote>
<blockquote>
<p>我们读书而后知道自己并不孤单。我们读书，因为我们孤单；我们读书，然后就不孤单，我们并不孤单。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>飞鸟集</title>
    <url>/2021/01/16/%E8%AF%BB%E4%B9%A6/14%E9%A3%9E%E9%B8%9F%E9%9B%86/</url>
    <content><![CDATA[<p>以前一直很喜欢一句诗”世界上最遥远的距离，不是生与死的距离，而是我就站在你面前，你却不知道我爱你“，一种说法是出自泰戈尔的《飞鸟集》，虽然里面并没有，但这就是我对于这位印度诗人的最初印象。</p>
<a id="more"></a>

<p>《飞鸟集》一开始是由孟加拉语写成，然后作者自译为英语。读的是中英对照本，虽然有些英语上的精妙还未曾读明白，但是来自汉语的美还是感受到了。</p>
<p>全书字数不多，都是一些小句子组成，描写了天空大海、花鸟鱼叶等日常之所见。泰戈尔也很爱写爱与神。</p>
<p>本想点评点评内容的，却发现自己不知如何下笔，那就模仿模仿大师的结尾吧。</p>
<p>“我相信世界的美好。”就让这句话作为我最后的话。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>夏天的飞鸟，<br>来到我的窗前，<br>歌唱，又飞走了。<br>秋天的黄叶，<br>它们没有什么曲子可唱，<br>一声叹息，飘落在地上。</p>
</blockquote>
<blockquote>
<p>广袤的沙漠，狂热追求一叶绿草的爱，但她笑着摇摇头，飞走了。</p>
</blockquote>
<blockquote>
<p>如果你因错过太阳而哭泣，那么你也会错过群星了。</p>
</blockquote>
<blockquote>
<p>“大海啊，你说的是什么？”<br>“是永恒的质疑。”<br>“天空啊，你回答的是什么？”<br>“是永恒的沉默。”</p>
</blockquote>
<blockquote>
<p>瀑布歌唱着：“我得到自由时，也就有了歌声。”</p>
</blockquote>
<blockquote>
<p>玻璃灯责备瓦灯叫他表兄。<br>但月亮出来时，玻璃灯却温柔一笑，叫月亮：“我亲爱的，亲爱的姐姐。”</p>
</blockquote>
<blockquote>
<p>我们看错了世界，反而说它欺骗了我们。</p>
</blockquote>
<blockquote>
<p>“果实啊，你离我有多远？”<br>“花儿啊，我藏在你心里。”</p>
</blockquote>
<blockquote>
<p>弓对即将离弦的箭低语：“你的自由就是我的自由。”</p>
</blockquote>
<blockquote>
<p>我住在我的小天地里，生怕它变得更小。把我带到您的世界里去吧，让我开心地失去所有的自由。</p>
</blockquote>
<blockquote>
<p>总有一天，我将在另一个世界的晨光里对你歌唱：<br>“以前在地球的光里，在人类的爱里，我曾经见过你。”</p>
</blockquote>
<blockquote>
<p>在我的生命中，有贫乏和沉默的地带。<br>它们是我忙碌的岁月得到阳光和空气的空旷之地。</p>
</blockquote>
<blockquote>
<p>“我相信你的爱。”就让这句话作为我最后的话。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>呐喊</title>
    <url>/2021/01/22/%E8%AF%BB%E4%B9%A6/15%E5%91%90%E5%96%8A/</url>
    <content><![CDATA[<p>从小到大，语文课本里也算是学过很多篇鲁迅的文章了。</p>
<a id="more"></a>

<p>但说实话，一直觉得鲁迅的文章很不易懂，因为影射太多。</p>
<p>譬如《狂人日记》，读第一遍，觉得很懵逼，说作者到底想表达什么。然后去网上找答案，才发现原来是一个异类最后被同化的故事。本来想每一篇读完都去网上找找解读的，可后来发现太累，于是作罢，囫囵吞枣的过了一遍。就像读后记里陈丹青所写，不被过度解读的文章，深得我心。</p>
<p>好几篇其实入选过课本，所以读起来不觉吃力，像孔乙己、药、故乡、社戏。以前没看过却一直听闻的有阿Q正传，毕竟阿Q的精神胜利法太有名了，“儿子打老子”不像话。白光这一篇也令我印象颇深，屡试不第然后求死，不知为何第一反应想到的是范进中举。</p>
<p>读到最后，惊喜的发现，社戏居然也在呐喊这本集子里。文中前半段北京看戏的部分没有入选课本，一开始还以为是同名文章。就像鲁迅再也没吃过那么好吃的豆一样，文中的那个情景，多年来从我第一次读就一直映在脑海里。同样的还有丰子恺《忆儿时》中秋吃蟹，汪曾祺《受戒》中的莲蓬和《亮剑》李云龙、和尚大闹县城前吃的那碟花生米。</p>
<p>扯的貌似有点远，不过这或许也正是大师文章的魅力之所在了。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>真的，一直到现在，我实在再没有吃到那夜似的好豆，——也不再看到那夜似的好戏了。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>仲夏夜之梦</title>
    <url>/2021/01/24/%E8%AF%BB%E4%B9%A6/16%E4%BB%B2%E5%A4%8F%E5%A4%9C%E4%B9%8B%E6%A2%A6/</url>
    <content><![CDATA[<p>仲夏夜之梦，很美的名字。</p>
<a id="more"></a>

<p>加上莎士比亚的大名，让我翻开这本书，也是第一次读莎翁作品。</p>
<p>虽然说本书被列为四大喜剧，但是或许我心目中的喜剧是那种笑点很多的品类吧，所以觉得以“荒诞”定义本书或许更为准确。</p>
<p>仙王和仙后因为一个男童爆发争吵，然后仙王打算凭借“一见钟情水”扳回局势，由于迫克的误操作导致的一系列荒谬情节。设定本身很老套，作为现代人，或许已经在电影里见惯了这种滥俗桥段。</p>
<p>下面进入本人的强行解读：</p>
<p>爱情是盲目的，从嫌恶到痴迷，是一滴药水的功效。</p>
<p>爱情是残酷的，昨日的海誓山盟，一转眼变为今日的恶语相向。</p>
<p>人生是荒谬的，每个人都在唱一出独角戏，你所谓的表演在别人看来，或许只是一个笑话。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>一切卑劣的弱点，在恋爱中都成为无足重轻，而变成美满和庄严。爱情是不用眼睛，而用心灵看着的，因此生着翼膀的丘匹德常被描成盲目；而且爱情的判断全然没有理性，是翼膀不是眼睛表示出鲁莽的迅速，因此爱神便据说是一个孩儿，因为在选择方面他常会弄错。</p>
</blockquote>
<blockquote>
<p>不要侮蔑你所不知道的真理，否则你将以生命的危险重重补偿你的过失。</p>
</blockquote>
<blockquote>
<p>爱情驱着一个人走的时候，为什么他要滞留呢？ </p>
</blockquote>
<blockquote>
<p>慈悲的睡眠，有时你闭上了悲伤的眼睛，求你暂时让我忘却了自己的存在吧！</p>
</blockquote>
<blockquote>
<p>使我对于赫米娅的爱情会像霜雪一样涣解，现在想起来，就像一段童年时所爱好的一件玩物的记忆一样；我一切的忠信，一切的心思，一切乐意的眼光，都是属于海丽娜一个人了。</p>
</blockquote>
<blockquote>
<p>最好的戏剧也不过是人生的一个缩影；最坏的只要用想像补足一下，也就不会坏到什么地方去。 </p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>霍乱时期的爱情</title>
    <url>/2021/02/17/%E8%AF%BB%E4%B9%A6/17%E9%9C%8D%E4%B9%B1%E6%97%B6%E6%9C%9F%E7%9A%84%E7%88%B1%E6%83%85/</url>
    <content><![CDATA[<p>有人说，《霍乱时期的爱情》写出了爱情所有可能的样子。这确实是一本没有一定经历，很难读懂的书。</p>
<a id="more"></a>

<p>我只能说完整的看完了这个故事。</p>
<p>全书时间线跨越五十年，情节紧凑，出场人物众多，甚至都难以完整记住主要人物的名字。</p>
<p>所以写这篇读后感，深深觉得一种无力感，不知道怎么写，写些什么。</p>
<p>可没办法，总得凑点字数。那就聊聊在合上书本十几天后，我依然有些印象的段落。</p>
<p>1.德圣阿莫尔之死<br>地下情人，隐秘的爱情，六十岁时选择的死亡，畸形的爱恋？完美的追求？</p>
<p>2.乌尔比诺临终之语<br>他对她说道：“只有上帝知道我有多爱你。”</p>
<p>3.代笔人门廊的再见<br>“今天，见到您时，我发现我们之间不过是一场幻觉。”<br>这是全书我最喜欢的地方。日思夜想，月月年年。有始无终，不若初见。<br>在这世界上，就是有那么多，突然之间不复存在。</p>
<p>4.“霍乱”船上<br>“来来回回究竟走到什么时候？”<br>“一生一世。”——准备了五十三年七个月零十一天的答案。</p>
<p>5.充斥全书的情欲描写<br>爱情与欲望？</p>
<p>等过段时间，再回来重新读一遍吧。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>极简宇宙史</title>
    <url>/2021/02/21/%E8%AF%BB%E4%B9%A6/18%E6%9E%81%E7%AE%80%E5%AE%87%E5%AE%99%E5%8F%B2/</url>
    <content><![CDATA[<p>全书只出现一个公式，爱因斯坦的质能方程E=mc^2。作为一个理工科学生，对于一些物理上的概念，都有所耳闻，像相对论、光速不变等。但都没有去仔细了解过，停留在顾名思义的层面上。</p>
<a id="more"></a>

<p>对于我来说，这本书让我知道了宇宙的膨胀以及它有边界，临界最后散射面、普朗克墙。广义相对论、狭义相对论大概是在说些什么，为什么到达光速会能够时光旅行？量子物理学、弦理论有哪些神奇的地方。宇宙中还有暗物质、暗能量。</p>
<p>其实在书看到中间的部分，讲到虚光子、粒子等各种东西的时候，已经有点晕了。只能去强记结论，毕竟物理学本身很复杂。</p>
<p>阅读过程中有勾起我的一些兴趣，会利用搜索引擎去找一些相关资料。一方面为那些设计精妙的科学实验拍案叫绝，像齿轮法测光速、木卫一证明光速不变原理。一方面也为那些读不懂的地方疑惑不已，例如量子物理中的不确定性原理。</p>
<p>其实这种科普类书籍的目的，本身就是让我们能够对这些知识领域产生兴趣，做到了解其大概。基于这一点来说，我想这本书是成功的。</p>
<p>甚至在读最后的译后记的时候，也让我感到了惊喜。就像译者所说，宇宙如此之大，粒子如此之小，在宇宙的尺度上，个人的努力与活动，又有多少意义？但正是这物理学和宇宙学本质里的宏大，让我们的生命变得更可贵。我们要如何行动，才能不辜负在这个宇宙里自己独特而又奇妙的生命。</p>
<p>豆瓣上一位书友的短评——“晒着八分二十秒到达的阳光，看着一百多万年前的恒星爆炸，还有什么再浪漫的事嘛！”</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>献给阿尔吉侬的花束</title>
    <url>/2021/03/11/%E8%AF%BB%E4%B9%A6/19%E7%8C%AE%E7%BB%99%E9%98%BF%E5%B0%94%E5%90%89%E4%BE%AC%E7%9A%84%E8%8A%B1%E6%9D%9F/</url>
    <content><![CDATA[<blockquote>
<p>我本可以忍受黑暗<br>如果我不曾见过太阳<br>然而阳光已使我的荒凉<br>成为更新的荒凉</p>
</blockquote>
<a id="more"></a>

<p>狄金森的一首诗，在书友评论中了解到的，因为太切合情节，所以想引用在最前面。</p>
<p>故事主要讲述一个智商只有六十几的心智障碍者在经受科学实验后成为天才，却因为效果的非永久性，又再度成为弱智的故事。</p>
<p>全书以第一人称叙述，以进步报告的形式展开。从查理·高登智商低下时的错字连篇不会用标点，到越写越流畅，再到最后的再度出现错别字。</p>
<p>书中探讨的东西其实颇多：<br>1.弱智的查理·高登把别人的捉弄误认为喜爱，到意识觉醒后的巨大落差。<br>2.两个查理·高登弱智与天才的双重性人格。<br>3.查理·高登与阿尔吉侬的同病相怜，并没有谁把他当作一个完整的人来看待。<br>4.从无到有，得而复失的感觉。</p>
<p>作为一本软科幻，写的其实是人性，仔细想想，可能也是每个人从无知到有知，快乐到不快乐的写照。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>现在我知道上大学和接受教育的最重要理由之一，是去了解你以前一直相信的事情并非真实，而且任何东西都不能只靠外表来决定。</p>
</blockquote>
<blockquote>
<p>查理是个笨蛋是她挥之不去的恐惧、罪恶与羞辱，她梦想着要设法解决。究竟这是马特或是她的错？是不断苦恼她的急迫问题。直到诺尔玛的出生证明她也能生出正常的孩子，我只是个异数后，她才不再想改变我。但我从来不曾停止渴盼变成她期待的聪明孩子，好让她能够爱我。</p>
</blockquote>
<blockquote>
<p>最奇怪的是，有着诚实与体贴情感的人，不会去占个天生没有手、脚或没有眼睛的人便宜，却会认为欺负一个弱智的人不算什么。令我生气的是，我想起不久前，自己就像这男孩一样，一直愚蠢地扮演小丑的角色。<br>我几乎忘了这件事。<br>不过不久前，我才知道别人都在嘲笑我。现在我知道自己已在不知不觉间加入他们，嘲笑起自己。这点才最让我难过。</p>
</blockquote>
<blockquote>
<p>我只想证明查理是个活生生存在于过去的人，这样我才能为自己的存在提出辩解。尼姆说他创造了我，让我深深觉得遭到侮辱。但我发现查理不仅活在过去，也活在当下。</p>
</blockquote>
<blockquote>
<p>一个白痴（idiot）还会有本我（id）吗？</p>
</blockquote>
<blockquote>
<p>宇宙在爆裂，每个微粒彼此远离，我们被抛入黑暗与寂寞的空间，把我们永远地撕开……胎儿离开母体，朋友和朋友分别，每个人彼此分离，踏上自己的道路，迈向孤独死亡的目标。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>平凡的世界</title>
    <url>/2020/03/14/%E8%AF%BB%E4%B9%A6/1%E5%B9%B3%E5%87%A1%E7%9A%84%E4%B8%96%E7%95%8C/</url>
    <content><![CDATA[<p>二零二零年二三月间，一个平平常常的日子，太阳一如既往的给大地提供阳光与温暖。时令已快到春分，虽然国际形势依然严峻，但连日好天气，似乎要驱走人们至今的阴霾。</p>
<a id="more"></a>

<p>以一段仿写开头，表示对路遥先生的敬意。</p>
<p>我也确实是在二三月间，读完了这本字数不少的小说。按照自己往日的习惯，我更喜欢交叉阅读，但在这期间，几乎是没有任何打断的读完了这本书。而且，读完之后总觉得要写点什么，方能对得起这次阅读体验。</p>
<p>全书时间跨度从1975到1985年，反映了文化大革命末期到改革开放初期的十年历史。以及时代浪潮下，小人物的生活变迁。我被深深吸引的原因，也是由于这一段对于我来说，不曾了解，所知甚少的历史了。</p>
<p>关于少安，印象比较深的应该是两件事，一是与润叶青梅竹马的爱情，最后因为门第悬殊，少安的单方面放弃，虽然可惜，但说明此人极度理性。第二件是办砖厂的起起落落，成功的人很多，但在失败后再次顶着压力成功，却甚少。</p>
<p>至于少平，则是一个极度自尊、极有原则、精神世界充盈的人。从一出场的的羞于拿两个非洲馍，对于贫穷的自卑，到后期与田晓霞、顾养民的侃侃而谈，精神世界的成长，是他全书最大的变化，当看到他对书籍的渴望，常使我自惭形秽。</p>
<p>再说说少平和晓霞的爱情，有人说是时代写死了田晓霞，有人说是路遥婚姻不幸不想写太完美的爱情。在我看来，恰恰是因为少平和晓霞的爱情，太不可能有完美结局，而作者又不想重复少安和润叶的情况，不得已下手而为之。最后，少平拒绝金秀选择回到煤矿，可能就是实际情况的影射。当然，我希望这种想法是我的一厢情愿。</p>
<p>书中有两个情节，一是抢水金俊斌身死，二是炸坝田二身死。最近很出名的一句话，“时代的一粒灰,落在个人头上,就是一座山”，不胜唏嘘。</p>
<p>再谈谈书名《平凡的世界》，每个人生来平凡，却又不甘平凡，最后归于平凡。就像书中少平，出来闯一闯的决心，但全书到结尾，也还是在矿上一名普普通通的工人。但正如书中所说，普通并不等于平庸，也许一辈子就是一个普通人，但要做一个不平庸的人。不平庸在看待世界的方式，思考问题的方式。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>一九七五年二三月间，一个平平常常的日子，细濛濛的雨丝夹着一星半点的雪花，正纷纷淋淋地向大地飘洒着。时令已快到惊蛰，雪当然再不会存留，往往还没等落地，就已经消失得无踪无影了。黄土高原严寒而漫长的冬天看来就要过去，但那真正温暖的春天还远远地没有到来。</p>
</blockquote>
<blockquote>
<p>少安慌得不知如何是好，把半支没抽完的烟卷扔掉，又赶快卷另一支。</p>
</blockquote>
<blockquote>
<p>他现在认识到，他是一个普普通通的人，应该按照普通人的条件正正常常的生活，而不要做太多的非分之想。当然，普通并不等于庸俗。他也许一辈子就是个普通人，但他要做一个不平庸的人。在许许多多平平常常的事情中，应该表现出不平常的看法和做法来。</p>
</blockquote>
<blockquote>
<p>他感到事态越来越险恶，但又不知道险恶倒究在哪里。</p>
</blockquote>
<blockquote>
<p>袅袅的炊烟从这个荒芜的山野里升起来，飘散在濛濛的细雨中。炉灶里，干河柴烧得劈啪响。小铁锅的水像蚊子似的开始吟唱。后窑掌里，铁青骡子嚼了黑豆，饮了半桶水，满足地打着响亮的喷鼻……把他的！这倒真像个“家”了！</p>
</blockquote>
<blockquote>
<p>他意识到，要走就得赶快走！要不，他就可能丧失时机和勇气，那个梦想就将永远成为梦想。现在正当年轻气盛，他为什么不去实现他的梦想呢？哪怕他闯荡一回，碰得头破血流再回到双水村来，他也可以对自己的人生聊以自慰了；如果再过几年，迫不得已成了家，那他的手脚就会永远被束缚在这个“高加索山”上！</p>
</blockquote>
<blockquote>
<p>她为睡不着而急躁，而越急躁越睡不着。</p>
</blockquote>
<blockquote>
<p>不要见怪，不要见外。田。</p>
</blockquote>
<blockquote>
<p>秘密最好过一段时间再给朋友倾吐。爱情啊，无论是橄榄还是黄连，得先自己一个人嚼一嚼！</p>
</blockquote>
<blockquote>
<p>人是这么多，劳动又这么沉重，谁告诉你应该怎样生活或不应该怎样生活？</p>
</blockquote>
<blockquote>
<p>哭，笑，都是因为欢乐。哭的人知道而笑的人并不知道，这欢乐是多少痛苦所换来的……</p>
</blockquote>
<blockquote>
<p>我看到的将会是怎样一个我？他在心里问自己。你啊！为什么不敢正视自己的不幸呢？你不愿看见它，难道它就不存在吗？你连看见它的勇气都鼓不起来，你又怎样带着它回到人们中间去生活？可笑。你这可笑的“鸵鸟政策”！</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>恶意</title>
    <url>/2021/03/20/%E8%AF%BB%E4%B9%A6/20%E6%81%B6%E6%84%8F/</url>
    <content><![CDATA[<p>手记与独白的交叉记述方式挺新颖的。</p>
<a id="more"></a>

<p>知道凶手后，大部分内容是在推测作案动机。一度以为初美是被日高杀害，而后为了报仇，野野口才去杀害日高。</p>
<p>果然自己还是被作者给骗了。</p>
<p>读到一大半的时候还在想，刚开始描写的杀猫有何作用呢？原来是在最后用上。</p>
<p>但或许我很难感同身受吧，总觉得最后给的为了掩盖事实而去杀害日高的理由有些牵强，亦或许是为了影子作家的这一头衔？</p>
<p>还算可以的一部推理小说。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>爱丽丝漫游奇境</title>
    <url>/2021/05/02/%E8%AF%BB%E4%B9%A6/21%E7%88%B1%E4%B8%BD%E4%B8%9D%E6%BC%AB%E6%B8%B8%E5%A5%87%E5%A2%83/</url>
    <content><![CDATA[<p>这本书名气蛮大的，可惜的是没有读出其中三味。</p>
<a id="more"></a>

<p>整体感觉人物的出场很莫名其妙，结尾也很突然。</p>
<p>或许是想表达孩童的想象力吧，据说也有很多双关在里面，但是没想细究了。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>活出生命的意义</title>
    <url>/2021/05/22/%E8%AF%BB%E4%B9%A6/22%E6%B4%BB%E5%87%BA%E7%94%9F%E5%91%BD%E7%9A%84%E6%84%8F%E4%B9%89/</url>
    <content><![CDATA[<p>本书作者维克多·弗兰克尔是一名在奥斯维辛集中营幸存下来的心理医生，他的父母、妻子、哥哥全都死于毒气室中，只有他和妹妹幸存。他开创了意义疗法，替人们找到绝处再生的意义。需要知晓的是他思考意义在进入集中营之前，所以或许意义疗法与他活下来不无关系。</p>
<a id="more"></a>

<p>全书分为两部分，第一部分是弗兰克尔于集中营的真实经历，描写了纳粹压迫下的犯人的行为与想法。这一部分加深了理论的可信度，而且如此的亲身经历也确实比小说更为精彩。第二部分是弗兰克尔关于意义疗法的阐述，意在向人们说明为什么要找寻意义，并以此对抗盛行的虚无主义。</p>
<p>按照弗兰克尔所说，追寻生命意义的途径有三种：<br>1.通过创立某项工作或从事某种事业：<br>工作与事业的成就感。</p>
<p>2.通过体验某种事情或面对某个人：<br>爱一个人，爱是直达另一个人内心深处的唯一途径，通过爱才能看到所爱的人的本质特性，看到他应实现而未实现的是什么。另外弗兰克尔不认为爱仅仅是性欲和本能的副现象（即作为主现象之结果而发生的现象），爱与性一样都是一种主现象，性是爱的表达方式，只有作为爱之载体的性才是正当的，甚至是神圣的。</p>
<p>3.在忍受不可避免的苦难时采取某种态度：<br>人主要关注的不是获得快乐或避免痛苦，而是看到其生命的意义。所以痛苦本身是没有意义的，而为了什么去承受痛苦，痛苦才具备了意义。另外痛苦不是寻找意义的必要方式，如果痛苦是可以避免的，那么有意义的事就是去消除痛苦的根源，否则遭受不必要的痛苦不如说是自虐。所以应该明白的是，即使在遭遇痛苦时，人们也有可能找到意义——假如痛苦是不可避免的话。</p>
<p>在当下，心理-卫生哲学强调的是，人应当幸福，而不幸福是调适不当的结果。这样一种价值体系可能会造成这样的后果：不可避免的不幸之重负由于对不幸感到不幸而变的更加严重了。</p>
<p>存在之虚无是20世纪（应该也包括21世纪）普遍存在的现象，存在之虚无主要表现是厌倦。如叔本华所说：人注定要徘徊在焦虑与厌倦这两极之间。<br>现代人的精神困境与存在之虚无息息相关，本能和传统的丧失，有时让人连自己想做什么都不知道，这样他要么去做别人所做的事（随大流），要么做别人希望他做的事（集权主义）。</p>
<p>弗兰克尔认为自由是消极的，责任是积极的。负责任才是存在之本质。（很有启发，留待以后思考）</p>
<p>正如书中反复引用尼采的话：“知道为什么而活的人，便能生存。”</p>
<p>一些不可控的力量可能会拿走你很多东西，但它唯一无法剥夺的是你自主选择如何应对不同处境的自由。你无法控制生命中会发生什么，但你可以控制面对这些事情时自己的情绪与行动。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>生活蒙太奇</title>
    <url>/2021/07/11/%E8%AF%BB%E4%B9%A6/24%E7%94%9F%E6%B4%BB%E8%92%99%E5%A4%AA%E5%A5%87/</url>
    <content><![CDATA[<p>总感觉工作之后就很难有天马行空的想象了，或许是生活琐事太多，让自己无暇顾及。</p>
<a id="more"></a>

<p>但有时确实需要沉下心来，静静地，暂时忘记一些关于钱财、房子之类的烦恼。</p>
<p>任思绪飘零一下，发现生活中不一样的美好。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>三行情书</title>
    <url>/2021/06/15/%E8%AF%BB%E4%B9%A6/23%E4%B8%89%E8%A1%8C%E6%83%85%E4%B9%A6/</url>
    <content><![CDATA[<p>三行情书起源于日本，第一次听说应该是高中时看新闻联播，上面播报日本举办活动，才了解到这样一种诗歌体裁。</p>
<a id="more"></a>

<p>北川理惠所编的这本小册子，我在几年前就曾看过。</p>
<p>恰巧因为昨晚聊到了三行情书，于是把它翻出来，花了半小时重读一遍。</p>
<p>在国人的日常中，情书一般指男女之间关于爱情的书信。但是在这本集子里，可以看到的是有很多父母与孩子、孙子对爷爷、朋友之间的亲情与友情。</p>
<p>这些情书的作者都是日常的普通人，从几岁的孩童到八九十岁的老人，没有太过华丽的词藻，多于口语和琐事。但那种日常中的温情或遗憾，也正是你我所能感同身受的。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>夏威夷的海边，或罗马遗迹这样的地方，<br>无论和谁去都会很开心的吧。<br>但车站前的商店街，也能让我幸福的一定只有你。</p>
</blockquote>
<blockquote>
<p>说长大后要和爸爸结婚的女儿，<br>笑得色眯眯，看起来很开心的老公，<br>和有那么一点吃醋的我……</p>
</blockquote>
<blockquote>
<p>所谓爱是怎么一回事呢？<br>你问过我。<br>爱啊，就是给喜欢的花儿不断地浇水。</p>
</blockquote>
<blockquote>
<p>老实说，<br>比起收到戒指而欣喜雀跃的你来，<br>你的生日，我比你还要高兴千百倍。</p>
</blockquote>
<blockquote>
<p>妻啊！<br>虽然“爱你”这种话说不出口，<br>但不准你比我先离开这个世界。</p>
</blockquote>
<blockquote>
<p>生日，并不是我的纪念日，<br>而是您的。<br>这件事在我也有孩子后终于明白了。</p>
</blockquote>
<blockquote>
<p>写给我的第一封短短的E-mail<br>——“可好？我很好。”<br>爸爸那粗大的手指也很厉害嘛。</p>
</blockquote>
<blockquote>
<p>虽然抽签结果是凶，<br>但是能和这样棒的女友一起来神社做年初参拜，<br>应该是大吉才是啊！老天爷！</p>
</blockquote>
<blockquote>
<p>写信给爸爸，<br>却不知写什么才好，<br>最后写了“家里的猫，还好么？”</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>百年孤独</title>
    <url>/2021/08/28/%E8%AF%BB%E4%B9%A6/25%E7%99%BE%E5%B9%B4%E5%AD%A4%E7%8B%AC/</url>
    <content><![CDATA[<p>人生天地间，忽如远行客。</p>
<a id="more"></a>

<p>读完本书的日子里，想过好几种这篇读后感的开头，但等到真正开写，貌似一个都不合适，脑海里一直是这两句诗在往外冒。</p>
<p>《百年孤独》这本书我买了其实有些年头了，之前尝试过好几回，最长一次是2020年的过年期间读到大概200页左右。我记忆中自己读过好几回都没读完，但是又一直心心念念想要读完的书，上一本是高中时候读的《红楼梦》。这两本书倒是也有相像之处，出场人物众多，魔幻与幻境，盛极而衰。所以被飓风卷走的马孔多小镇，用曹雪芹之语“落了片白茫茫大地真干净”来形容，真是也贴切不过。</p>
<p>《百年孤独》是难啃的，布恩迪亚家族七代人，循环往复的超长重命名，实在是让人望而却步。加之一百多年的时间跨度，读到后面我都对不上每个人和事。本想翻书一一求证下出处，但是转念一想，既然都是一百多年前的事了，何苦记那么清。</p>
<p>书中的每个人，无论是痴迷科学（炼金术）的第一代何塞·阿尔卡蒂奥，发动几十次战争的布恩迪亚上校，终生未婚的阿玛兰妲，独裁者阿尔卡蒂奥，死于炼金术的何塞阿尔卡蒂奥第二，痴迷于欢宴的奥雷里亚诺第二等等。充斥于其身上的满满都是孤独，即便是对权利、欲望、享乐的追求，也无疑是为了排遣这种无法舍弃的孤独。</p>
<p>马尔克斯太会写了，文字的描写是有其有限性的，那就是再好的小说也会有完结。但所有的事情都只不过是往事的一次次重演。布恩迪亚家族七代人，仅仅是对姑妈的不伦恋就发生了两回，长猪尾巴的后代亦是。如同羊皮卷所预言，“家族的第一个人被捆在树上，最后一个人正被蚂蚁吃掉”。历史的偶然与必然性，就在这循环中超出了篇幅的限制。</p>
<p>所以飞走的马孔多小镇绝不是消失了，它只是重新落在了别的地方。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>上帝掷骰子吗：量子物理史话</title>
    <url>/2021/08/29/%E8%AF%BB%E4%B9%A6/26%E4%B8%8A%E5%B8%9D%E6%8E%B7%E9%AA%B0%E5%AD%90%E5%90%97%EF%BC%9A%E9%87%8F%E5%AD%90%E7%89%A9%E7%90%86%E5%8F%B2%E8%AF%9D/</url>
    <content><![CDATA[<p>断断续续的，终于读完了这本。</p>
<a id="more"></a>

<p>记得之前在知乎上看到过一个提问说，“为啥20世纪后，现代物理没啥突破进展”，一个回答是，“因为除了相对论和量子力学两个词之后，现代物理的成果我们都看不懂了”。当时看到这个回答后我觉得说的挺有道理，现在读完本书，深以为然。</p>
<p>高中大家都学过牛顿力学，由于引力的存在产生自由落体、天体运动，这种日常现象，至少普通人如我还能勾勒出来画面。</p>
<p>然后到了广义相论摇身一变，引力场被解释成时空的弯曲。好嘛，咱们打打比方，把宇宙想象成一个平铺的床单，地球是在床单上的一个篮球，篮球使床单凹陷，那么在篮球周围的东西，比如一个弹珠，就沿着倾斜的床单滑向篮球，这就解释了引力，貌似还能理解。</p>
<p>结果到光这里出了点麻烦，色散实验貌似告诉我们光是由不同颜色的微粒混合而成，结果双缝实验又想让我们明白光是一种波。</p>
<p>物理界的各位大佬当然谁也不服谁，吵吵闹闹，喋喋不休，吵了三百多年，吵出来一个波粒二象性。实在想不到读书时，老师嘴上带过的一个小小理论居然有这么长的故事。</p>
<p>再然后“薛定谔的猫”出现了，微观到宏观的转化，让猫既生又死。再然后量子理论的多种解释，依然是谁也不服谁。</p>
<p>反正读这本书的时候，里面的理论我是开头还能理解，到后面就是懵懵懂懂，似是而非，像是做思维训练。整体的感受就是翻几页出来一个大佬，哇这名字以前听过，再翻下一页，哇，又是一个大佬。读完一遍，好像啥也没记住，又好像知道大家对于量子物理在吵吵啥。</p>
<p>就像书封面上的读者评语，“谁不拥有此书，他就是一个和时代脱节的人”。在这样一个浮躁的社会，我们真该知道，原来除了娱乐八卦，世界上还在发生这么多重大的事情。那么有牛顿、爱因斯坦、普朗克、玻尔等人在前，又何苦需要去饭圈追星呢？</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>红与黑</title>
    <url>/2021/09/20/%E8%AF%BB%E4%B9%A6/27%E7%BA%A2%E4%B8%8E%E9%BB%91/</url>
    <content><![CDATA[<p>读完后，歇了好几天，不知道该怎么写读后感。一方面好像没读懂，一方面不知道怎么去评价。</p>
<a id="more"></a>

<p>自己对于法国历史，对于拿破仑是不甚了解的。所以背景历史，我能够了解到的仅仅是底层人物的上升通道随着拿破仑的退幕而关闭大门。</p>
<p>地位低下的木匠小儿子，博文强识的天才于连，孤傲、自负、敏感、多疑的性格，对荣誉和地位无限向往。</p>
<p>出众的才华与姣好的容貌，让其连续赢得瑞那夫人和玛娣儿特青睐。</p>
<p>可能由于价值观的不敢苟同，对于书中的这三个主要人物，不太喜欢的起来。</p>
<p>不知道这三个人到底是否有爱情？</p>
<p>我想于连绝大多数时间是没有的，更多的是对两位女士高价值的附属属性所带来的征服欲与满足感。</p>
<p>瑞那夫人，仿佛是一个情窦初开的少女，不惜为情郎牺牲一切。</p>
<p>玛娣儿特则是对英雄史诗场景的无限憧憬，她和于连或许是一类人，不安于自身所处阶级与存在，想要突破牢笼的桎梏。</p>
<p>于连无疑是有才干与野心的，但是道德上的善良，又让其对一些肮脏手段嗤之以鼻，两者的不匹配导致了最后的悲惨结局。死前大彻大悟，对社会现状的控诉，对爱的渴望，对不被欲望束缚的自由的向往。</p>
<p>红与黑，作为两种对立的颜色。既象征着阶级的对立，又象征着人自身性格的对立。司汤达在书的最后结尾写道，“献给幸运的少数人”，不知这少数人是不是指看破这迷障之人。</p>
<p>“初看无人似于连，再看人人是于连。”</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>西线无战事</title>
    <url>/2021/10/26/%E8%AF%BB%E4%B9%A6/28%E8%A5%BF%E7%BA%BF%E6%97%A0%E6%88%98%E4%BA%8B/</url>
    <content><![CDATA[<blockquote>
<p>他沉思着望向前线：“要是不危险的话，炮火还真美。”</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p>他于1918年10月阵亡。那天，整个前线寂静无声。军队指挥部战报上的记录仅有一句：西线无战事。</p>
</blockquote>
<blockquote>
<p>在这场被称作“第一次世界大战”的战争中：<br>共计16,543,185人死亡<br>其中士兵9,721,937名<br>平民6,821,248名<br>共计21,228,813名士兵受伤（或致残）<br>共计5000万至1亿人受到战争伤害</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>置身事内:中国政府与经济发展</title>
    <url>/2022/02/12/%E8%AF%BB%E4%B9%A6/29%E7%BD%AE%E8%BA%AB%E4%BA%8B%E5%86%85:%E4%B8%AD%E5%9B%BD%E6%94%BF%E5%BA%9C%E4%B8%8E%E7%BB%8F%E6%B5%8E%E5%8F%91%E5%B1%95/</url>
    <content><![CDATA[<p>总体来说本书前半部分的阅读体验是大于后半部分的。</p>
<a id="more"></a>

<p>上半部分从中国政府的政治组成与结构说起，先分析了政府的权利与职责范围。然后就经济建设这一核心目标，述说了各级政府的行为，尤其是中央政府和地方政府。再围绕着历史上的几次改革，如分税制改革，阐述了一些具体的政府行动。以及之后的土地财政，招商引资与债务分析，对自己颇有启发。</p>
<p>反观下半部分的宏观内容，倒是有点流于表面，尽是些人尽皆知的道理了。</p>
<p>另外每一章后面附的书单推荐确实有助于按图索骥，去好好追踪下。</p>
<p>总的来说推荐阅读，但不至于那么高的评分。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>定投十年财务自由</title>
    <url>/2020/03/28/%E8%AF%BB%E4%B9%A6/2%E5%AE%9A%E6%8A%95%E5%8D%81%E5%B9%B4%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1/</url>
    <content><![CDATA[<p>说实话这本书跟《指数基金投资指南》的重合度挺高，倘若也读过指南，大概很快就能翻完。</p>
<a id="more"></a>

<p>小白入门还是蛮有帮助，自己也长期关注他公众号，对钉大的毅力还是极为佩服。</p>
<p>定投，其实就是用计划来规避掉人的心理弱点，戒除“追涨杀跌”。较长的时间线上，通过多次投入来拉低成本，达到盈利目的。</p>
<p>1.对于个人投资者来说，不融资，不做空，用长期不用的闲钱投资，是始终要遵循的铁律。</p>
<p>2.长期投资，不缺机会，缺钱。</p>
<p>3.耐心，是投资者最好的美德。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>4%法则是麻省理工学院的学者威廉·班根（William Bengen）在1994年提出的理论。通过投资一组资产，每年从退休金中提取不超过4%的金额用来支付生活所需，那直到自己去世，退休金都花不完。因为，资产自己会增值。换句话说，如果一年需要40万元的开销，那就需要40万元/4%=1000万元。把这1000万元投资到一组资产上，每年提取不超过4%的金额，就可以满足一年40万元的生活开销，实现财务自由。</p>
</blockquote>
<blockquote>
<p>通常我们定投时，可以以优秀的宽基策略加权指数基金为主，以优秀行业指数基金为辅。例如以红利、基本面、价值、低波动四类策略加权指数基金为主，以消费、医药、中概互联行业指数基金为辅。</p>
</blockquote>
<blockquote>
<p>第一种止盈方式，是按照收益率止盈，通常喜欢的是暴涨暴跌的品种。这类品种一般周期性比较强，估值变化非常大，而自身的盈利增长和分红通常不太高。所以定投这种波动大、周期性强、估值变化剧烈的品种，按照收益率止盈效率会更高。通常2<del>3年就可以止盈一次。代表就是证券、能源等周期性比较强的行业。第二种止盈方式，是按照估值止盈，高估时卖出。使用这种止盈方式，投资者会长时间持有指数基金，通常在一轮牛熊市里都持有。这个过程中，如果指数基金自身的盈利增长高，那最后叠加牛市估值的上涨，带来的总收益是非常惊人的。这类品种不应该按照收益率止盈，否则浪费了背后公司的盈利增长。代表就是优秀的宽基指数基金，如红利、基本面、价值、低波动等。另外还有优秀的行业指数基金，如消费、医药、中概互联等。大牛市没来时，低估买入，持有它们，也会有很不错的收益。通常是7</del>10年止盈一次。第三种止盈方式，是不止盈，长期持有拿分红。只要买入时的股息率比较高，长期来看指数基金提供的分红现金流也会比较稳定。依靠分红现金流能满足日常生活的需求，投资者也就不需要再揪心股票市场的涨涨跌跌了。代表就是股息率高的宽基指数基金，如上证50、沪深300、恒生、H股、标普500等，以及高股息率的红利类指数基金。通常一个投资品种，只适合一到两种止盈方式，无法三者兼顾。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>半小时漫画历史系列</title>
    <url>/2022/03/02/%E8%AF%BB%E4%B9%A6/30%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E5%8E%86%E5%8F%B2%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<p>较简洁，对于熟悉的朝代，可能感觉说的有些谬误或者不对之处。</p>
<a id="more"></a>

<p>但总体上对历史脉络做了梳理，对于不了解的朝代如南北朝、五代十国等还是有一些帮助。</p>
<p>一本快速浏览的科普读物，不过第一册东周的班级描述方式着实让我有些劝退，世界史部分有些意思。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>半小时漫画经济学系列</title>
    <url>/2022/03/02/%E8%AF%BB%E4%B9%A6/31%E5%8D%8A%E5%B0%8F%E6%97%B6%E6%BC%AB%E7%94%BB%E7%BB%8F%E6%B5%8E%E5%AD%A6%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<p>经济与生活和社会息息相关，小到柴米油盐，大到世界战争。</p>
<a id="more"></a>

<p>前三册感觉较有趣，尤其是第二册介绍一些重大经济事件。</p>
<p>第四册理财篇个人感觉有些鸡肋。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>桶川跟踪狂杀人事件</title>
    <url>/2022/03/18/%E8%AF%BB%E4%B9%A6/32%E6%A1%B6%E5%B7%9D%E8%B7%9F%E8%B8%AA%E7%8B%82%E6%9D%80%E4%BA%BA%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>初闻书名，以为是一本推理悬疑小说，甚至连作者名都让我一度有网文作者的即视感。了解后才知道是纪实文学，源自日本“三流”周刊记者的采访手记。</p>
<a id="more"></a>

<p>变态跟踪狂雇凶杀人，事情本身并不稀奇。但牵扯到警察署的不作为，让事件变得复杂起来。“诗织是小松跟警方杀死的”，这句话开启了清水洁追踪案件的全部过程。</p>
<p>记者的采访后来受到议员的重视，推动了日本《跟踪骚扰行为规范法》的出台。</p>
<p>一个普通记者出于职业和道德的良知，全程付出巨大的努力，最后得到这一份改动进程的结果。很不幸的了解到清水洁的女儿后来也去世了，甚至让我一度猜想会不会被报复。</p>
<p>这样的事件不会是第一起，也不会是最后一起。</p>
<p>“纪实文学最大的优点就是真实，最大的悲哀就是当今依旧真实。”（引自豆瓣短评）</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>长安的荔枝</title>
    <url>/2022/10/12/%E8%AF%BB%E4%B9%A6/34%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D/</url>
    <content><![CDATA[<p>“一骑红尘妃子笑，无人知是荔枝来”。</p>
<a id="more"></a>

<p>以这句诗拓展出来的一个小故事，剧情还算完整。也因为诗的广为人知，而让人觉得新颖，但文笔和故事性欠佳。</p>
<p>倘若因神作榜而来，或许会失望了。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>房思琪的初恋乐园</title>
    <url>/2022/04/21/%E8%AF%BB%E4%B9%A6/33%E6%88%BF%E6%80%9D%E7%90%AA%E7%9A%84%E5%88%9D%E6%81%8B%E4%B9%90%E5%9B%AD/</url>
    <content><![CDATA[<p>写这样的一篇读后感，注定是很艰难的事，因为需要重新代入房思琪的经历，可我却不想再经历一次这样的过程了。甜建议我看林奕含的采访，同样因为这个原因我没有行动。</p>
<a id="more"></a>

<p>即便如此，读后感还是需要写的，并且要比以往更加认真的写。</p>
<p>全书主要人物包括，知名教师李国华，十三岁那年被李国华以指导作文为由进行性侵的文学少女房思琪，房思琪从小的灵魂伙伴怡婷，住楼上被家暴的依纹姐姐。</p>
<p>太阳底下无新鲜事，最近几年，教师性侵学生案的报道也还是不少的。但或许因为新闻报道较为旁观，所以当以房思琪的视角去审视他的心理活动时，令我更加感同深受。</p>
<p>性侵：<br>李国华所在的老师团体，无一不对学生进行猎捕，甚至还有女老师充当皮条客的角色。弱小无助的女学生，成为他们专门的犯罪对象。因为他们明白，对方没有反抗之力。</p>
<p>斯德哥尔摩综合症：<br>文中的房思琪会问李国华爱不爱自己，被李国华遗弃的郭晓奇也如此。为什么受害者要去请求加害者的原谅，当一件自己无比厌恶却又不得不做的事情摆在你面前，你需要为其赋予意义，对于思琪来说“爱李国华”，是她长期以来接受性侵的意义。</p>
<p>抑郁症：<br>我以前也经常听说抑郁症这个词，向来比较乐观的自己也很难想象为什么有人会因为抑郁症而失控甚至自杀。但事实就是，压在抑郁症病人身上的重量，让其只能选择死亡。房思琪最后是疯了，或许在林奕含看来，忘掉一起是最好的结果。</p>
<p>网络暴力：<br>在网络上将经历发出来的郭晓奇，反被键盘侠质疑。</p>
<p>家庭暴力：<br>一直被家暴却对丈夫温柔的许依纹，最终在家暴流产后选择离婚，或许是本书中唯一的斗争胜利。</p>
<p>怡婷一直对思琪跟李国华走的很近甚是嫉妒，一开始我以为是“汝之蜜糖，彼之砒霜”式的妒忌心和无知者式的愚昧。看到最后才明白，或许最初是两个少女对文学名师的憧憬，但到后来其实是对思琪离自己越来越远，对李国华让自己失去好友的嫉妒。也为友谊而不是怒火中烧带来的一抹亮色而感到欣慰。</p>
<p>写到最后，我想到了《洛丽塔》，如果不是因为知道这是真实事件，那么这本书或许是一本很好的虚构文学。</p>
<p>但很可惜的是：房思琪疯了，林奕含死了，李国华仍然逍遥法外。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>你当像鸟飞往你的山</title>
    <url>/2020/04/25/%E8%AF%BB%E4%B9%A6/3%E4%BD%A0%E5%BD%93%E5%83%8F%E9%B8%9F%E9%A3%9E%E5%BE%80%E4%BD%A0%E7%9A%84%E5%B1%B1/</url>
    <content><![CDATA[<p>知道这本书，是源于比尔·盖茨的书单推荐。读前先翻了简介，以至于我认为主要讲的是女孩逆袭成为学霸的故事。</p>
<a id="more"></a>

<p>可当阅读第一章，说实话看了两遍，才弄明白写了些什么。因为实在想不通塔拉的父亲为何会有那些想法。查阅一下背景 ，提到摩门教，导致我认为摩门教是某种邪恶组织，给人传输这一类思想。后来发现并非如此，塔拉一家本身就是摩门教之中的异数。</p>
<p>因为中西方文化的不同，加之身边的人都不信教。当我第一次读历史，知道为了信仰，可以爆发战争，在我看来很不可思议。同样，书中塔拉的父亲不给孩子上户口，拒绝医院治疗，等待末日降临，总给我一种荒唐之感。但又不得不提醒自己，这件事情确实存在，并且时间跨度上并不遥远。</p>
<p>全书最让我感到震惊的是，父母对子女，丈夫对妻子，一个人对周围人，那种可怕的影响力，尤其这种影响力还极为负面。一开始鼓励支持儿女的母亲，可以到最后对丈夫唯命是从，“相信女儿的行为”成为自始至终的欺骗。教骑马友善的哥哥，可以打电话来问怎样杀死她。打算说出真话的姐姐，会迫于压力，最后作出完全相反的举动。人言可畏，周围所有亲近的人都否定你，以至于自己都会否定自己。</p>
<p>本书的英文名叫Educated，塔拉通过受教育改变了对这个世界的认知。从一开始的格格不入，那种深深自卑感，到最后的坦然面对。在我读来薄薄的几页纸，在她那却是沉重的。因为受教育，认识了更大的世界，也因为受教育，不得不远离家庭。思想上不可调和的矛盾，导致很多年没见过父母。如书中所说，“过去是一个幽灵，虚无缥缈，没什么影响力。只有未来才有分量。”，期望她能找到那条回家的路。</p>
<p>你当像鸟飞往你的山，你的过去属于巴克峰，你的未来却在巴克峰之外。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>过去总是美好的，因为一个人从来都意识不到当时的情绪；它后来扩展开来，因此我们只对过去，而非现在，拥有完整的情绪。</p>
</blockquote>
<blockquote>
<p>想起汇而构成人一生的所有决定——人们共同或者独自做出的那些决定，聚合起来，制造了每一桩单独事件。沙粒不可计数，叠压成沉积物，然后成为岩石。</p>
</blockquote>
<blockquote>
<p>考试结束了。百叶窗打开了。我走到室外，站在冬日的严寒中，凝望着瓦萨奇山脉的峰顶。我想留下。群山依旧陌生而险恶，但我想留下来。</p>
</blockquote>
<blockquote>
<p>我们在公路外的田野里见了最后一面。我们身后是高耸的巴克峰。他说他爱我，但这超出了他的能力范围。他不能拯救我。能拯救我的只有我自己。</p>
</blockquote>
<blockquote>
<p>先找出你的能力所在，然后再决定你是谁。</p>
</blockquote>
<blockquote>
<p>你不是愚人金￼，只在特定的光线下才发光。无论你成为谁，无论你把自己变成了什么，那就是你本来的样子。它一直在你心中。不是在剑桥，而是在于你自己。你就是黄金。回到杨百翰大学，甚至回到你家乡的那座山，都不会改变你是谁。那可能会改变别人对你的看法，甚至也会改变你对自己的看法——即便是黄金，在某些光线下也会显得晦暗——但那只是错觉。金子一直是金子。</p>
</blockquote>
<blockquote>
<p>我告诉他们，我曾经贫穷而无知。当我告诉他们这些时，我丝毫不感到羞耻。那时我才明白羞耻感的来源：不是因为我不曾在铺着大理石的音乐学院学习，也不是因为我没有当外交官的父亲；不是因为父亲是半个疯子，也不是因为母亲跟着他亦步亦趋。我的羞耻感源自我有一个将我朝吱嘎作响的大剪刀刀刃推去，而不是将我拉走远离它们的父亲；我的羞耻感源自我躺在地上的那些时刻，源自知道母亲就在隔壁房间闭目塞听，那一刻完全没有选择去尽一个母亲的责任。</p>
</blockquote>
<blockquote>
<p>过去是一个幽灵，虚无缥缈，没什么影响力。只有未来才有分量。</p>
</blockquote>
<blockquote>
<p>我所有的奋斗，我多年来的学习，一直为了让自己得到这样一种特权：见证和体验超越父亲所给予我的更多的真理，并用这些真理构建我自己的思想。我开始相信，评价多种思想、多种历史和多种观点的能力是自我创造力的核心。如果现在让步，我失去的将不仅仅是一次争论。我会失去对自己思想的掌控权。这就是要求我付出的代价，我现在明白了这一点。父亲想从我身上驱逐的不是恶魔，而是我自己。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>绿野仙踪</title>
    <url>/2020/05/04/%E8%AF%BB%E4%B9%A6/4%E7%BB%BF%E9%87%8E%E4%BB%99%E8%B8%AA/</url>
    <content><![CDATA[<p>感觉成年人是不太适合读童话的，因为他们对事物的第一反应是对不对，而小孩子是问哪里有。</p>
<a id="more"></a>

<p>所以阅读的过程，最好提醒自己这是一场属于你的离奇冒险。</p>
<p>你叫多萝茜，是个小女孩，和叔叔婶婶住在大草原。</p>
<p>有一天，龙卷风将房子吹到天上，房屋下落时意外砸死了东方恶女巫。你解救了梦奇金人，得到了恶女巫的银鞋子，和好女巫的祝福。</p>
<p>你想要回家，于是沿着黄砖路去往翡翠城，寻找奥芝的帮助。</p>
<p>你会在冒险中碰到三个朋友，他们是“没有脑子”的稻草人，“没有心”的铁皮樵夫和“没有胆量”的狮子。</p>
<p>大家为了得到自己没有的东西，共同前往目的地，一路上历尽艰难险阻。冒险途中，稻草人积极动脑，铁皮人温柔善良，狮子勇往直前。</p>
<p>你们到达翡翠城，并按照与奥芝的约定，前往杀死了西方恶女巫。</p>
<p>可后来发现，法力强大的奥芝，并不会任何魔法。</p>
<p>奥芝决定放弃撒谎，返回故乡奥马哈，并在最后一个善意的谎言中，给予了大家最缺乏的东西——“自信”。</p>
<p>于是，稻草人拥有了脑子，铁皮樵夫拥有了心，狮子拥有了胆量。</p>
<p>他们决定继续帮助你回到故乡，你们再次冒险，前去寻找南方好女巫。</p>
<p>好女巫告诉你，你脚上的银鞋子，可以帮助你回家。</p>
<p>你告别众人，用脚后跟轻敲三下地面，返回了故乡。</p>
<p>而那双银鞋子，在空中飞行时掉了下来，永远的埋藏在大沙漠里。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>“你根本不需要脑子。你每天都在学习新的东西。婴儿虽然有脑子，但是婴儿什么也不知道。只有经验才能增长知识，你在这世界上活的时间越长，经验肯定越丰富。” </p>
</blockquote>
<blockquote>
<p>每个人在面临危险的时候都会害怕。真正的胆量是勇敢地面对危险，其实你已经拥有了这样的胆量。</p>
</blockquote>
<blockquote>
<p>我想你不需要有一颗心。有了心反而使很多人烦恼。你要知道你是多么幸运，因为你没有心。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>人生海海</title>
    <url>/2020/05/17/%E8%AF%BB%E4%B9%A6/5%E4%BA%BA%E7%94%9F%E6%B5%B7%E6%B5%B7/</url>
    <content><![CDATA[<p>“人生海海是一个闽南语，它是一句方言，简单的说人生就像大海一样，什么东西都装得下去，大海同时也有非常汹涌的一面，什么东西它都颠覆得了，表示的一个人生其实有非常美好，但人生有时候也有非常幽暗的一面，我希望你们一生都是平平安安的，顺顺利利的，但我不敢保证，你们每个人都有这个荣幸，那活着有时候是一个很艰难的事。”</p>
<a id="more"></a>

<p>其实我很多年前听过五月天的一首同名歌曲，那会儿就很喜欢“人生海海”这个词。但真正促使我去阅读这本书，源于最近在追的一部纪录片《文学的日常》，上面那段话是麦家在其中的一段采访。整集采访中，麦家表现的那样一种孤独，让我很想知道这样一个全身紧绷，充满悲观的人到底会写些什么。</p>
<p>全书围绕上校的“太监”称号，作为一条线，穿插了三个时代故事。主要人物有老保长、爷爷、父亲、小瞎子、林阿姨（上校妻子）。上校一生的经历非常传奇，先从国民党，后加入共产党，当过特务，做过军医，参加抗美援朝，负有“金一刀”之名，后被文化大革命摧毁，晚年神志不清。</p>
<p>爷爷，讲了一辈子大道理，最后绕不过“鸡奸犯”的名声，做下举报之事，被所有人唾弃，不得善终。<br>老保长，吃喝嫖赌，对上校之事最为了解，也最为敬佩，不愿说他个不字，守了一辈子秘密。<br>父亲，跟上校一辈子兄弟，因为爷爷之事，晚年信鬼神。<br>小瞎子，时代的牺牲品，最后依然污蔑父亲，不过这也才真实，毕竟所谓恩怨情仇，哪能一笔勾销。<br>林阿姨，因害上校革职，觉得有愧，陪着上校走完最后一程。<br>“我”，家破人亡，流离海外，有幸遇到前妻，多少年后见证故事的结尾。</p>
<p>书中的内容其实很荒唐，哪有遇到个女鬼佬，在肚皮上刺字的。但大家都说，“现实比小说更荒唐”。</p>
<p>所以面对这样一个莫名其妙的世界，才会说，“世上只有一种英雄主义，就是在认清了生活真相后依然热爱生活。”</p>
<hr>
<p>书摘</p>
<blockquote>
<p>春末秋初都是夏天，像夏天的凌晨四五点和夜晚七八点都是白天一样。</p>
</blockquote>
<blockquote>
<p>每到夏天，在萤火虫漫天飞的夜晚，在臭气熏天的天井或弄堂里，爷爷总是吃着烟，扇着篾扇，跟我和表哥讲这些那个。讲起这些那个，爷爷像老天爷，天上的仙，地下的鬼，人间的理，世间的道，什么都知道，讲不完。讲着看着，月亮升起来了，村子安静下来，蛐蛐在石头缝里㘗㘗叫，水牛在栏里噗噗喷气，壁虎在墙壁上画画，老鼠在谷仓里唱歌，猫头鹰在后山竹林里哭泣。爷爷讲，它们前世都是人，作了孽才伏了法，转世做不成人，做了蛇虫百兽。</p>
</blockquote>
<blockquote>
<p>爷爷讲过，村子的一年四季，像人的一辈子，春天像少小孩子，看上去五颜六色，生龙活虎，朝气蓬勃，实际上好看不中用，开花不结果，馋死人（春天经常饿死人）；夏天像大小伙子，热度高，精气旺，力（热）气日日长，蛇虫夜夜生，农忙双抢（结婚生子），手忙脚乱，累死人；秋天像精壮汉子，人到中年，成熟了，沉淀了，五谷丰登，六畜兴旺，天高云淡，不冷不热，爽死人；冬天像死老头子，寒气一团团冒，衣服一件件添，出门缩脖子，回家守床板，闷死人。</p>
</blockquote>
<blockquote>
<p>你这人就是自私，总想着要体面，把面子当命根子。他妈的，面子顶个屁用！我当初像狗一样活着，人家太监现在也是一只丧家之犬，小瞎子是废物一个，屙屎连屁股都不会擦，不都照样活着。照你这样想，我们都该去死，就你一个人活着。</p>
</blockquote>
<blockquote>
<p>生活不是你活过的样子，而是你记住的样子。</p>
</blockquote>
<blockquote>
<p>世上只有一种英雄主义，就是在认清了生活真相后依然热爱生活。</p>
</blockquote>
<blockquote>
<p>记住，人生海海，敢死不叫勇气，活着才需要勇气，如果你死了，我在阴间是不会嫁给你的。</p>
</blockquote>
<blockquote>
<p>人生如戏，每一出戏都明里暗地连好的，如果我没有三年流浪汉的垃圾生活，就不可能有后来的垃圾生意；曾经垃圾让我丢尽脸面，如今垃圾加倍地偿还我尊严。</p>
</blockquote>
<blockquote>
<p>幸福是养自己心的，不是养人家眼的。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>俗世奇人：足本</title>
    <url>/2020/06/06/%E8%AF%BB%E4%B9%A6/7%E4%BF%97%E4%B8%96%E5%A5%87%E4%BA%BA%EF%BC%9A%E8%B6%B3%E6%9C%AC/</url>
    <content><![CDATA[<p>对冯骥才的认识来源于中学课本，印象很深的是他写的《珍珠鸟》，开头和结尾至今都还记得，本书中的“刷子李”和“泥人张”也入选过。</p>
<a id="more"></a>

<p>全书36个外号，对应36个故事，发生地点都在天津卫。阅读过程中，不时让我想起小时候读的《故事会》杂志。闲来无事，一天读几篇，很快就读完了。</p>
<p>里面满满的天津腔，“这嘛那嘛”，颇接地气。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>有第一，没第二，第三差着十万八千里。</p>
</blockquote>
<blockquote>
<p>人世间最吃得开的有四大样：钱、权、爹、长相。有钱通神，有权比神还顶用，有好爹就是有靠山，长相俊招得人见人爱。可是单这些还不行。有钱有权还得会使，有爹有长相还得会用，这里边有一件要紧的东西不能缺——好法儿。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>人类简史：从动物到上帝</title>
    <url>/2020/05/31/%E8%AF%BB%E4%B9%A6/6%E4%BA%BA%E7%B1%BB%E7%AE%80%E5%8F%B2%EF%BC%9A%E4%BB%8E%E5%8A%A8%E7%89%A9%E5%88%B0%E4%B8%8A%E5%B8%9D/</url>
    <content><![CDATA[<p>大概记了一下每章内容：<br>1.约七万年前，智人从东非迁移，造成其他人类物种的灭绝。<br>2.智人语言更为灵活，组合后包含更多的信息。八卦传达大量社会关系的信息。智人语言具有虚构的能力。</p>
<a id="more"></a>

<p>3.我们难以对采集者社会作出准确推断，但不能否认其对于现在及周围环境的影响。<br>4.约45000年前，智人开始从亚非大陆往外迁移，造成大量物种灭绝。<br>5.约公元前9500-8500年，农业革命开始。物种演化上的成功并不代表个体的幸福。<br>6.人类社会是基于想象建构的秩序。<br>7.为了记录更多的信息，人类发明了文字，文字同样改变了人类思考和看待这个世界的方式。<br>8.人类社会产生了阶级区别，种族区别，性别区别。<br>9.历史的大方向是分久必合。<br>10.应经济活动日益活络，出现了金钱。金钱制度两大原则：万物可换和万众相信。<br>11.帝国促进了民族和文化的融合，全球帝国可能会在未来出现。<br>12.泛神论、多神论、一神论，宗教是第三种让人类统一的力量。<br>13.全球无法避免成为单一文化，历史的选择绝不是为了人类的利益。<br>14.过去500年，科学革命开始，人类承认自己的无知。<br>15.欧洲人的不满足，促进了科学的发展，进而促进帝国的成长，二者互相影响。<br>16.资本主义左右了科学的发展，并影响了帝国主义的出现。<br>17.过去200年，工业革命开始，能量转换被驾驭，消费主义出现。<br>18.工业革命让家庭和地方社群崩溃，改由国家和市场取代。<br>19.我们快乐吗？<br>20.智慧设计取代自然选择，智人或许不再存在。</p>
<p>书中的几个观点颇有趣。<br>一是八卦和虚构对于人类社会的影响。通过八卦，智人传达了大量关于社会关系的信息内容，进而使智人发展出更紧密、更复杂的合作方式。而虚构的能力，让人们一起想象，编织出共同的故事，而创造了国家、社会与各种团体。<br>二是资本主义对于政治的影响力。原来资本主义不仅可以支持哥伦布航海，荷兰人能用它来信贷，招募雇佣兵与西班牙人打仗。希腊独立战争可以发行债券，反抗军节节败退，债券持有人的利益迫使英国加入战局，击溃奥斯曼帝国主要舰队。希腊自由的代价，是一大笔无力偿还的债务，战争本身也成了商品。<br>三是关于快乐的讨论。受自由主义当道的影响，人们普遍认为快乐是一种主观感受。人们对于快乐的判断，往往基于自身的感觉。但假若你去问海洛因成瘾的患者，你会发现他们志同道合，所有人都说吸毒的时候最快乐了。所以这里应该有一个思考，我们常说要去做自己想做的事，那会使我们快乐，真的这样吗？<br>四是对于智慧设计法则的畅想。智人通过种种手段，改造本身，创造生命。那么未来的智人，还会是智人吗？</p>
<p>原来读历史，读到最后发现，还是得哲学出马。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>然而，以上这些东西，其实都只存在人类自己发明并互相讲述的故事里。除了存在于人类共同的想象之外，这个宇宙中根本没有神、没有国家、没有钱、没有人权、没有法律，也没有正义。</p>
</blockquote>
<blockquote>
<p>第一波的灭绝浪潮是由于采集者的扩张，接着第二波灭绝浪潮则是因为农民的扩张；这些教训，让我们得以从一个重要观点来看今日的第三波灭绝浪潮：由工业活动所造成的物种灭绝。有些环保人士声称我们的祖先总是和自然和谐相处，但可别真的这么相信。早在工业革命之前，智人就是造成最多动植物绝种的元凶。人类可以说坐上了生物学有史以来最致命物种的宝座。</p>
</blockquote>
<blockquote>
<p>从采集走向农业的转变，始于大约公元前9500年~公元前8500年，发源于土耳其东南部、伊朗西部和地中海东部的丘陵地带。</p>
</blockquote>
<blockquote>
<p>种种想让生活变得轻松的努力，反而给人带来无穷的麻烦</p>
</blockquote>
<blockquote>
<p>我们从农业革命能学到的最重要一课，很可能就是物种演化上的成功并不代表个体的幸福。</p>
</blockquote>
<blockquote>
<p>在农业革命之后，人类成了远比过去更以自我为中心的生物，与“自己家”紧密相连，但与周遭其他物种画出界线。</p>
</blockquote>
<blockquote>
<p>我们相信某种秩序，并非因为它是客观的现实，而是因为相信它可以让人提升合作效率、打造更美好的社会。</p>
</blockquote>
<blockquote>
<p>而这也正是文字对人类历史所造成的最重要的影响：它逐渐改变了人类思维和看待这个世界的方式。过去的自由连接、整体思考，已经转变为分割思考、官僚制度。</p>
</blockquote>
<blockquote>
<p>随着时间流逝，不公不义的歧视常常只是加剧而不是改善。富者越富，而贫者越贫。教育带来进一步的教育，而无知只会造成进一步的无知。历史上过去的受害者，很可能会再次受害。而历史上过去的特权分子，他们的特权也很可能依然存在。</p>
</blockquote>
<blockquote>
<p>这三种全球秩序，首先第一种是经济上的货币秩序，第二种是政治上的帝国秩序，而第三种则是宗教上的全球性宗教，像是佛教、基督教和伊斯兰教。</p>
</blockquote>
<blockquote>
<p>金钱正是有史以来最普遍也最有效的互信系统。</p>
</blockquote>
<blockquote>
<p>文字的出现是为了因应行政活动的日益频繁，而麦元的出现则是为了因应经济活动的日渐活络。</p>
</blockquote>
<blockquote>
<p>（1）宗教认为世界有一种超人类的秩序，而且并非出于人类的想象或是协议。（2）以这种超人类的秩序为基础，宗教会发展出它认为具有约束力的规范和价值观。</p>
</blockquote>
<blockquote>
<p>基督徒大致上是信奉一神论的上帝，相信二元论的魔鬼，崇拜多神论的圣人，还相信泛神论的鬼魂。</p>
</blockquote>
<blockquote>
<p>历史的铁则就是：事后看来无可避免的事，在当时看来总是毫不明显。</p>
</blockquote>
<blockquote>
<p>这么说来，究竟为什么要学历史？历史不像是物理学或经济学，目的不在于做出准确预测。我们之所以研究历史，不是为了要知道未来，而是要拓展视野，要了解现在的种种绝非“自然”，也并非无可避免。未来的可能性远超过我们的想象。</p>
</blockquote>
<blockquote>
<p>1945年7月16日上午5点29分45秒。就在这一秒，美国科学家在新墨西哥的阿拉莫戈多引爆了第一颗原子弹。从这时开始，人类不仅有了改变历史进程的能力，更有了结束历史进程的能力。</p>
</blockquote>
<blockquote>
<p>在过去500年间，科学、帝国和资本之间的回馈循环无疑正是推动历史演进的主要引擎。</p>
</blockquote>
<blockquote>
<p>中国和波斯其实并不缺乏制作蒸汽机的科技（当时要照抄或是购买都完全不成问题），他们缺少的是西方的价值观、故事、司法系统和社会政治结构，这些在西方花了数个世纪才形成及成熟，就算想要照抄，也无法在一夕之间内化。</p>
</blockquote>
<blockquote>
<p>真正让银行（以及整个经济）得以存活甚至大发利市的，其实是我们对未来的信任。“信任”就是世上绝大多数金钱的唯一后盾。</p>
</blockquote>
<blockquote>
<p>在19世纪末，中国鸦片成瘾者约有4000万，足足占了全国人口1/10。</p>
</blockquote>
<blockquote>
<p>核子末日的威胁促进了和平主义；和平主义大行其道，于是战争退散、贸易兴旺；贸易成长，也就让和平的利润更高，而战争的成本也更高。随着时间过去，这个良性循环也就对战争造成另一个阻碍，而且可能最后看来会是最重要的阻碍：因为国际网络日渐紧密，使得多数国家无法再维持全然独立，所以其中任何一国片面宣战的机会也就大幅降低。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>人类群星闪耀时</title>
    <url>/2020/07/12/%E8%AF%BB%E4%B9%A6/8%E4%BA%BA%E7%B1%BB%E7%BE%A4%E6%98%9F%E9%97%AA%E8%80%80%E6%97%B6/</url>
    <content><![CDATA[<p>本书是茨威格精选的14个历史瞬间，其中地理发现类3篇、政治战争类5篇、文学艺术类5篇，技术发明类1篇。</p>
<a id="more"></a>

<p>读完《亨德尔的复活》，我特地去听了《弥赛亚》，结果从乐评中发现了一大堆被“茨威格”安利过来的小伙伴。作者的深厚功力，可见一斑。</p>
<p>全书最喜欢的一篇是《壮志未酬》。那种拼命努力过，最后却抱憾身死的壮烈，总会让人们产生共情。</p>
<p>领队为了不拖累其他三位伙伴，主动求死，在离开帐篷时说的最后一句话，“我想出去走走，可能要在外面待一会儿。”</p>
<p>斯科特记录到生命最后一刻的日记，直至手指冻坏，直至书写的笔从冻僵的手中滑落。</p>
<p>以及最后茨维格写的那一句，“这些在所有时代都最最伟大的悲剧，作家可能只会偶尔创作，但现实生活却早已将其演绎了千百遍。”</p>
<p>整本书读下来会发现作者比较重视戏剧性，将某一时刻无限放大，进而达到改变历史进程的高度，不难看到作者的浪漫主义情怀。</p>
<p>虽然作者这种一分钟改变全世界的历史观，我不是很苟同。</p>
<p>但不可否认，茨威格想要表达的的正直、善良和勇敢，永远不会过时。</p>
<ul>
<li>1513年 西班牙探险家巴尔沃亚首次发现太平洋（地理发现）</li>
<li>1453年 奥斯曼帝国苏丹穆罕默德二世攻陷拜占庭帝国首都君士坦丁堡（政治战争）</li>
<li>1741年 音乐家亨德尔从偏瘫中奇迹般康复创作经典圣歌《弥赛亚》（文学艺术）</li>
<li>1792年 法军上尉鲁热在几小时内完成《马赛曲》的创作此曲后来成为法国国歌（文学艺术）</li>
<li>1815年 法军元帅格鲁希错判形势导致拿破仑惨败滑铁卢战役（政治战争）</li>
<li>1823年 74岁的德语诗人歌德写下爱情绝唱《玛丽恩巴德哀歌》（文学艺术）</li>
<li>1848年 瑞士人苏特尔引发美国西部“淘金潮”（地理发现）</li>
<li>849年 俄国作家陀思妥耶夫斯基临刑前一分钟获得沙皇特赦（文学艺术）</li>
<li>1858年 美国商人菲尔德成功铺设大西洋海底电缆（技术发明）</li>
<li>1910年 俄国作家托尔斯泰在生命最后时刻离家出走（文学艺术）</li>
<li>1912年 英国探险队第二个到达南极点归途中相继殒命（地理发现）</li>
<li>1917年 列宁从流亡地瑞士重返俄国（政治战争）</li>
<li>公元前43年 古罗马政治家西塞罗未能挽救共和政体（政治战争）</li>
<li>1919年 美国总统威尔逊未能实现一战后和平计划（政治战争）</li>
</ul>
<hr>
<p>书摘</p>
<blockquote>
<p>巴尔沃亚站在巴拿马地峡的高山之巅向南眺望，看到了南太平洋的广阔水域，因此他把这片海称为“南海”，这是太平洋最古老的称呼。而当麦哲伦1520年穿越这片水域之时，竟然神奇地没有遭遇恶劣的天气和暴风，所以他们称其为“太平洋”￼。</p>
</blockquote>
<blockquote>
<p>一个人生命中最大的幸运，莫过于在他的人生中途，即在他最富创造力的壮年之时，发现了自己的人生使命。</p>
</blockquote>
<blockquote>
<p>然而历史犹如人生，业已失去的瞬间不会因为抱憾的心情而重返，仅仅一个小时所贻误的东西，用千年的时光也难以赎回。</p>
</blockquote>
<blockquote>
<p>而判断一个艺术家的独立人格到底有多强烈，从他是否结婚这件事情上就可以看出端倪，因为结婚在一定程度上就意味着服从社会化的既定规则，接受整个社会对你的驯化。所以，结了婚的海顿与莫扎特都举止文雅、衣着华丽，甘心做一个宫廷的侍从；而独身的亨德尔与贝多芬则狂放不羁、不修边幅，富于反抗精神。</p>
</blockquote>
<blockquote>
<p>对于巴黎而言，莱茵河对岸的所谓敌人只是一个模模糊糊的概念，不过是用来表述激情的修辞手段，而对于阿尔萨斯人而言，敌人却是一个看得见、感觉得到的现实，因为从加固的桥头堡旁、从主教堂的塔楼上，都能一目了然地看到正在开来的普鲁士军队。</p>
</blockquote>
<blockquote>
<p>我想出去走走，可能要在外面待一会儿。”（I am just going outside and may be some time.）</p>
</blockquote>
<blockquote>
<p>奥兹突然站了起来，“我想出去走走，”他对朋友们说，“我可能要在外面待一会儿。”其他人不禁战栗起来，他们知道，在这种情况下出去走一圈意味着什么。但是没有人敢说一句话来阻止他，没有人有勇气伸出手向他道别，因为他们所有人都怀着敬畏的心感觉到，劳伦斯·奥兹，这个英国皇家禁卫军的骑兵上尉，正像一位英雄一样朝死神走去。</p>
</blockquote>
<blockquote>
<p>这些在所有时代都最最伟大的悲剧，作家可能只会偶尔创作，但现实生活却早已将其演绎了千百遍。</p>
</blockquote>
<blockquote>
<p>那时，新闻机构只关注那些经常发表言论的人，而他们不知道，恰恰总是那些读了很多东西、学了很多东西的孤独的人，往往是世界革命化进程中最危险的人。</p>
</blockquote>
<blockquote>
<p>一个年老之人，既不应该寻求死亡，也不应该推托死亡；不管死亡什么时候到来，人们都应该顺其自然地迎接它。对于坚忍不拔的人来说，不存在可耻的死亡。</p>
</blockquote>
<blockquote>
<p>他和他那一代知识分子的命运，其实可以算作是第十五个故事，读来不由让人唏嘘。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>身份的焦虑</title>
    <url>/2020/07/18/%E8%AF%BB%E4%B9%A6/9%E8%BA%AB%E4%BB%BD%E7%9A%84%E7%84%A6%E8%99%91/</url>
    <content><![CDATA[<p>本书探讨了焦虑的几种起因：<br>1.为了获得社会之爱而去渴求身份。<br>2.群体性的势利病症，将人的社会地位和个人价值完全画上等号。</p>
<a id="more"></a>

<p>3.我们妒忌和我们处于同一层次的人。物质进步和人人平等让我们不断渴求成功，媒体和社会舆论加剧了这一切。<br>4.富人不再为他们奢华的生活感到羞愧，贫穷变成了一种耻辱。<br>5.我们的需求和能力、运气、雇佣关系、经济变化等带来的不确定性。</p>
<p>其实就是，金钱至上的社会中，每个人都不停的与他人进行比较，媒体和舆论加剧了这一切，并且受限于能力、运气等一些不稳定因素，我们产生焦虑。</p>
<p>自尊 = 实际的成就 / 对自己的期待<br>随着期待的高一级，遭受羞辱的可能性也增加一分，因此理解的正常生活决定了我们的幸福指数。</p>
<p>针对焦虑给出了几种解决方法：<br>1.对于他人的评价应该理性分析，而不是无条件的期待他人的爱。<br>2.通过艺术用批判的眼光来看待生活。<br>3.确立身份的标准在不停变化，现代物质社会中，金钱成为判断成功人生的依据，这一意识形态的本身并不一定合理。<br>4.死亡会改变我们对最重要事情的看法，时间和空间上的广阔所带来的个人渺小感，使我们得以宁静。<br>5.身份的焦虑在于我们选择的听众群体，在于我们对他们价值观的遵循。</p>
<p>作者提出了那么多方式，哲学、艺术、政治、基督教和波希米亚，是为了提供一种合理性，世界上并非只有一种方式才能证明生活的成功。</p>
<p>所以归根到底，还是尝试改变自己的价值观：<br>1.没法期待所有人的爱。<br>2.在死亡、宇宙的维度上，个人的渺小其实无足轻重。</p>
<hr>
<p>书摘</p>
<blockquote>
<p>在现代社会里，我们总爱拿自己的成就与被我们认为是同一层面的人相比较，身份的焦虑便缘此而生了。</p>
</blockquote>
<blockquote>
<p>我们的很多欲望总是与自己真正的需求毫无关系。过多地关注他人（那些在我们的葬礼上不会露面的人）对我们的看法，使我们把自己短暂一生之中最美好的时光破坏殆尽。假如我们不能停止忧虑，我们将会用生命中大量的光阴为错误的东西而担心，这才是最令人痛心疾首的事情。</p>
</blockquote>
<blockquote>
<p>“被他人注意、被他人关怀，得到他人的同情、赞美和支持，这就是我们想要从一切行为中得到的价值。</p>
</blockquote>
<blockquote>
<p>我们对自己特性和品质的认识总是在一些相互矛盾的评价中飘忽不定。一会儿觉得自己聪明机巧、幽默风趣、一言九鼎，一会儿又觉得自己蠢笨如牛、了无情趣、一钱不值，在这种摇摆无定的情状下，我们对自身价值的判断完全受制于社会的态度——若得褒扬，我们就会感觉良好；反之，则痛不欲生。仿佛我们对他人的情感负有亏欠似的。</p>
</blockquote>
<blockquote>
<p>深藏在我们内心的害怕其实才是势利产生的惟一根源</p>
</blockquote>
<blockquote>
<p>我们妒嫉的只是和我们处在同一层次的人，即我们的比照群体。世上最难忍受的大概就是我们最亲近的朋友比我们成功。</p>
</blockquote>
<blockquote>
<p>个体是为了自己的利益才加入社会组织中，他们放弃自己的一些自由和权利，来换取社会的保护。</p>
</blockquote>
<blockquote>
<p>在一个民主社会里，有的只是报刊和社会舆论没完没了的鼓噪，让每个生活在底层的人都相信他们总有机会攀上社会金字塔的塔尖，有机会成为实业家、大法官、科学家，甚至是总统。这种无限机遇的论调在一开始也许能给人一种盲目的乐观，对那些底层的年轻人尤甚。但在他们之中，只有极少数最优秀的幸运儿才有机会脱颖而出，实现他们的梦想；而多数的人，随着时间一天天过去，他们并不能改变自己的身份，正如托克维尔所言，他们会转而变得意志消沉，内心极度痛楚，并轻贱自己，同时也憎恶自己的顶头上司们。</p>
</blockquote>
<blockquote>
<p>贫穷本身就是一种痛苦，而在精英崇拜的社会里，贫穷更是一种羞辱。</p>
</blockquote>
<blockquote>
<p>只有那些既对我们非常不利又完全真实的言论和态度才会破坏我们的自尊心。我们经常处于一种自虐过程当中，在没有搞清他人观点是否值得关注之前就去寻求他人的赞赏；但只要我们对某些人的思想稍加研究，就会发现他们根本不值得我们尊敬，然而我们往往在弄清楚这一切之前就竭力想得到他们的爱戴。我们应该停止这一自虐过程。</p>
</blockquote>
<blockquote>
<p>我们除了惧怕失败所导致的物质损失之外，还惧怕世人对待失败的毫不宽容的态度，即世人倾向于把那些在事业上没有取得成功的人称为“输家”——这个词语冷漠地指向两层含义，首先是指称一些人在某些方面受到损失，其次说明他们的所作所为使他们丧失了获得同情的权利。</p>
</blockquote>
<blockquote>
<p>关于人的理想标准并非像石头一样一成不变。身份的理想标准长期以来都是，将来也一定会处于不断的变化当中。我们可以用一个词来形容这一个变化过程，这个词就是政治。</p>
</blockquote>
<blockquote>
<p>贫困的最根本特征，贫困最令人痛苦的地方，并不是它所导致的身体上的痛苦，而是他人对贫困状态的负面反应所导致的羞耻感，是贫困状态违反了斯密所称的“既定的社会体面原则”所产生的羞耻感。</p>
</blockquote>
<blockquote>
<p>要想停止注意某件事物，最快的方法就是将它购买到手——就如同要想停止欣赏某个人，最快的方法可能就是与其结婚。</p>
</blockquote>
<blockquote>
<p>生活就是用一种焦虑代替另一种焦虑，用一种欲望代替另一种欲望的过程——这样说，并非要我们永远都不要去努力克服焦虑，或不要努力去满足某种欲望，而是要求我们在努力追求的过程中要明白一个道理：我们的任何一个目标向我们提供的一劳永逸的保证，按照目标本身的意思，是不可能实现的。</p>
</blockquote>
<blockquote>
<p>理解并不是总能防止问题的发生，但它在一个最小的范围内，能够教会我们很多有用的东西，让我们知道如何以最好的方式去面对问题，从而大幅度地降低受害的感觉、被动的感觉和困惑的感觉。或者我们可以更加野心勃勃地说，理解这一切将是我们迈出的第一步，以此开始我们可以改变或者挑战社会理想，从而建立一个更美好的社会。</p>
</blockquote>
<blockquote>
<p>死亡的想法对我们的影响或许就是引领我们去追求任何对我们真正重要的东西，不管这些东西是在尼罗河畔饮酒，写一部书，还是发一笔财；同时还会鼓励我们漠视他人对我们的评价，因为他人的评价毕竟与我们的死亡没有丝毫的关系。对死亡的预见能够使我们追求我们内心中最渴望的生活方式。</p>
</blockquote>
<blockquote>
<p>要想克服认为自己微不足道的自卑感，我们无须努力使自己变得更加重要，而是要认识到所有的人相对而言都是微不足道的。</p>
</blockquote>
<blockquote>
<p>对身份低下的焦虑进行治疗，最好的办法就是通过旅游——在现实中旅游或在艺术作品中旅游——去感受世界的广阔无垠。</p>
</blockquote>
<blockquote>
<p>不管身份的焦虑如何令人不快，但我们还是很难想象一种完全摆脱身份焦虑的美好生活，因为一个人对失败和在他人面前丢脸的恐惧，实际上意味着他抱有一定的追求，期待某些结果的出现，以及对自己以外的其他人心怀尊敬。身份的焦虑是我们承认在成功生活和不成功生活之间存在公共差异的时候，必须付出的代价。</p>
</blockquote>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
  <entry>
    <title>水浒传</title>
    <url>/2024/05/25/%E8%AF%BB%E4%B9%A6/35%E6%B0%B4%E6%B5%92%E4%BC%A0/</url>
    <content><![CDATA[<p>第一次读《水浒传》，应该是上初中，那时候电视上正在播李雪健主演的电视剧，播到“三打祝家庄”。恰好家里有一本借来的书，于是就着电视剧热映，读了一半，当时还没那么喜欢，没等到读完就到了归还的日期了。</p>
<a id="more"></a>
<p>再见面是在高中课本上，“风雪山神庙”和“智取生辰纲”，尤其向往林冲裹着棉被在庙里吃熟牛肉喝冷酒的场景。</p>
<p>几年前重新翻开《水浒传》，读到宋江蒙九天玄女授天书三卷，因为实在是对宋江喜欢不起来，再次作罢。</p>
<p>这些年，电视剧已经反复看过无数遍。但情节删减始终觉得不过瘾，于是又把原著找了出来。</p>
<p>距离初读水浒，已经过了十几年，这一次，终于耐着性子读完了。</p>
<p>读完后拖着一个多月了，也没写感想。</p>
<p>因为要给水浒传写评价，实在是极难的。想写点啥，可觉得实在不够能力点评这本名著。</p>
<p>所记住的唯有“生熟牛肉,肥鹅嫩鸡”和“吃的口滑，止不住要吃”，不得不佩服施公写作手法之高超而已。</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>读书</tag>
      </tags>
  </entry>
</search>
